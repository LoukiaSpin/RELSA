bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Papers/PostOPPaper/Relsa package/paper figures/Clusters/", bsl,
filename="Burrowing levels", drops=c("bw","score"), turns=c("hr","mgs","temp"), relsaNA=NA, k=4,
showScree="no", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
saveTiff="yes")
##### Severity Profiles #########################################
### ALL in
testraw      <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt" )
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
df      <-NULL
profile <- c()
for(i in 1:length(unique(testset$id))){
animal       <- i
R            <- relsa(testset, bsl, a=animal,  drop=c("bw","score"), turnvars=c("hr", "mgs","temp"), relsaNA=NA)$relsa
R$treatment  <- pre_test[pre_test$id==unique(pre_test$id)[animal],"treatment"]
R$condition  <- pre_test[pre_test$id==unique(pre_test$id)[animal],"condition"]
profile[i]   <- max(R$rms, na.rm=TRUE)
df           <- rbind(df, data.frame(id=unique(pre_test$id)[animal], day=R$day,
treatment=R$treatment, condition=R$condition, rms=R$rms))
}
mean(df[df$treatment=="Transmitter",]$rms)
mean(df[df$treatment=="Sham",]$rms, na.rm=TRUE)
### Some general markers for the plots
mycolors   <- rep(NA, dim(df)[1])
mycolors[(df$condition =="Metamizol") & (df$treatment =="Transmitter")] <- rgb(118/255, 6/255, 154/255 )
mycolors[(df$condition =="Metamizol") & (df$treatment =="Sham")]        <- rgb(222/255, 139/255, 249/255 )
mycolors[(df$condition =="Carprofen") & (df$treatment =="Transmitter")] <- "black"
mycolors[(df$condition =="Carprofen") & (df$treatment =="Sham")]        <- rgb(160/255, 160/255, 164/255)
mypch      <- rep(NA, dim(df)[1])
mypch[(df$condition =="Metamizol") & (df$treatment =="Transmitter")] <- 18
mypch[(df$condition =="Metamizol") & (df$treatment =="Sham")]        <- 5
mypch[(df$condition =="Carprofen") & (df$treatment =="Transmitter")] <- 25
mypch[(df$condition =="Carprofen") & (df$treatment =="Sham")]        <- 6
plot(rep(1,length(df[df$id==unique(df$id)[1], "rms"])), df[df$id==unique(df$id)[1], "rms"],
xlim=c(0, length(unique(df$id))), ylim=c(0,1.4),
col= unique(mycolors[ df$id==unique(df$id)[1]]),
pch= unique(mypch[ df$id==unique(df$id)[1]])   , ylab="RELSA score", xlab="Animal index",
bg = "black", cex=1)
for(i in 2:length(unique(df$id))){
points( rep(i,length(df[df$id==unique(df$id)[i], "rms"])), df[df$id==unique(df$id)[i], "rms"],
col= unique(mycolors[ df$id==unique(df$id)[i]]),
pch= unique(mypch[ df$id==unique(df$id)[i]]),
bg = "black", cex=ifelse(unique(mypch[ df$id==unique(df$id)[i]])==18,1.7,1))
}
abline(h=levels$level1, lwd=2, lty=2)
abline(h=levels$level2, lwd=2, lty=2)
abline(h=levels$level3, lwd=2, lty=2)
abline(h=levels$level4, lwd=2, lty=2)
text(100,levels$level1+0.1, levels$level1 )
text(100,levels$level2+0.1, levels$level2 )
text(100,levels$level3+0.1, levels$level3 )
text(100,levels$level4+0.1, levels$level4 )
abline(v=13.5, lwd=1, lty=3)
# lines(1:length(unique(testset$id)), profile, col="black", lwd=2)
legend("topleft",c("TM+Carp","TM+Meta"),
pch=c(25,18), col=c("black", rgb(118/255, 6/255, 154/255)), bty="n", pt.bg = c("black",NA), pt.cex =c(0.9,1.5) )
legend("topright",c("Sham+Carp","Sham+Meta"),
pch=c(6,5), col=c(rgb(160/255, 160/255, 164/255),rgb(222/255, 139/255, 249/255)), bty="n", cex=0.9)
title("Post-OP All")
library(RELSA)
postop
raw          <- postop
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
pre          <- relsa_norm(cbind(raw[,1:4], raw[,vars]),
normthese=c("bur2h","burON","hr","hrv","temp","act","mgs"), ontime=1)
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
bsl
library(RELSA)
library(RELSA)
raw          <- postop
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
pre          <- relsa_norm(cbind(raw[,1:4], raw[,vars]),
normthese=c("bur2h","burON","hr","hrv","temp","act","mgs"), ontime=1)
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
levels       <- relsa_levels(pre, drops=c("bw","score"), turns=c("hr","mgs","temp"),
k=4, customCol= c("red","green","blue","magenta"))
library(RELSA)
raw          <- postop
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
pre          <- relsa_norm(cbind(raw[,1:4], raw[,vars]),
normthese=c("bur2h","burON","hr","hrv","temp","act","mgs"), ontime=1)
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
relsa_levels(pre, drops=c("bw","score"), turns=c("hr","mgs","temp"),
k=4, customCol= c("red","green","blue","magenta"))
levels       <- relsa_levels(pre, bsl=bsl, drops=c("bw","score"), turns=c("hr","mgs","temp"),
k=4, customCol= c("red","green","blue","magenta"))
library(RELSA)
library(RELSA)
raw          <- postop
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
pre          <- relsa_norm(cbind(raw[,1:4], raw[,vars]),
normthese=c("bur2h","burON","hr","hrv","temp","act","mgs"), ontime=1)
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
levels       <- relsa_levels(pre, bsl=bsl, drops=c("bw","score"), turns=c("hr","mgs","temp"),
k=4, customCol= c("red","green","blue","magenta"))
levels
library(RELSA)
animal       <- 1
RELSA        <- relsa(set=pre, bsl, a=animal, drop=c("bw","score","mgs30","mgs180"),
turnvars=c("hr","mgs","temp"), relsaNA=NA)
library(RELSA)
# Build modell ------------------------------------------------------------
raw          <- postop
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
pre          <- relsa_norm(cbind(raw[,1:4], raw[,vars]),
normthese=c("bur2h","burON","hr","hrv","temp","act","mgs"), ontime=1)
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
levels       <- relsa_levels(pre, bsl=bsl, drops=c("bw","score"), turns=c("hr","mgs","temp"),
k=4, customCol= c("red","green","blue","magenta"))
# Test model --------------------------------------------------------------
animal       <- 1
RELSA        <- relsa(set=pre, bsl, a=animal, drop=c("bw","score","mgs30","mgs180"),
turnvars=c("hr","mgs","temp"), relsaNA=NA)
animal       <- 1
RELSA        <- relsa(set=pre, bsl, a=animal, drop=c("bw","score","mgs30","mgs180"),
turnvars=turnvars, relsaNA=NA)
plotset      <- relsa_plot(pre, RELSA, levels=levels, animal=animal, plotRELSA=TRUE, myYlim=c(0,1.4))
animal       <- 1
RELSA        <- relsa(set=pre, bsl, a=animal, drop=c("bw","score","mgs30","mgs180"),
turnvars=turnvars, relsaNA=NA)
plotset      <- relsa_plot(pre, RELSA, levels=levels, animal=animal, plotRELSA=TRUE, myYlim=c(0,2))
# Test model --------------------------------------------------------------
animal       <- 1
RELSA        <- relsa(set=pre, bsl, a=animal, drop=c("bw","score","mgs30","mgs180"),
turnvars=turnvars, relsaNA=NA)
plotset      <- relsa_plot(pre, RELSA, levels=levels, animal=animal, plotRELSA=TRUE, myYlim=c(0,1))
library(RELSA)
RELSA
library(RELSA)
animal       <- 1
RELSA        <- relsa(set=pre, bsl, a=animal,
drop=c("bw","score","mgs30","mgs180"), turnvars=turnvars)
head(RELSA$relsa$rms)
library(RELSA)
# Build modell ------------------------------------------------------------
raw          <- postop
vars         <- c("bwc", "bur2h", "burON", "hr", "hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
pre          <- relsa_norm(cbind(raw[,1:4], raw[,vars]),
normthese = c("bur2h", "burON", "hr", "hrv", "temp", "act", "mgs"), ontime = 1)
bsl          <- relsa_baselines(dataset = pre, bslday = -1, variables = vars, turnvars = turnvars)
levels       <- relsa_levels(pre, bsl = bsl, drops = c("bw", "score"), turns = c("hr", "mgs", "temp"),
k = 4, customCol = c("red", "green", "blue", "magenta"))
# Test model --------------------------------------------------------------
animal       <- 1
RELSA        <- relsa(set = pre, bsl, a = animal,
drop=c("bw", "score", "mgs30", "mgs180"), turnvars = turnvars)
head(RELSA$relsa$rms)
library(RELSA)
system("R CMD Rd2pdf RELSA")
getwd()
system("R CMD Rd2pdf RELSA --no-clean")
ack <- "RELSA"
path <- find.package(pack)
pack <- "RELSA"
path <- find.package(pack)
path
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote(path)))
system("R CMD Rd2pdf RELSA")
pack <- "RELSA"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote(path)))
system("R CMD Rd2pdf relsa.Rd ")
pack <- "relsa.Rd"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote(path)))
system("R CMD Rd2pdf relsa_load.Rd ")
pack <- "relsa.Rd"
path <- find.package(pack)
system("R CMD Rd2pdf relsa_load.Rd")
system("R CMD Rd2pdf C:/MHH Bleich/Papers/PostOPPaper/Relsa package/RELSA/man/relsa_load.Rd")
paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote(path))
system("R CMD Rd2pdf 'C:/MHH Bleich/Papers/PostOPPaper/Relsa package/RELSA/man/relsa_load.Rd'")
pack <- "RELSA"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote(path)))
system("R CMD Rd2pdf RELSA")
system("R CMD Rd2pdf RELSA")
pack <- "RELSA"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote(path)))
shQuote(texi2dvi)
devtools::build_manual()
fun <- "relsa"
help(fun, package = "RELSA", help_type = "pdf")
system(paste0("open ",  fun, ".pdf"))
fun <- "postop"
help(fun, package = "RELSA", help_type = "pdf")
system(paste0("open ",  fun, ".pdf"))
fun <- "relsa_baselines"
help(fun, package = "RELSA", help_type = "pdf")
system(paste0("open ",  fun, ".pdf"))
fun <- "relsa_levels"
help(fun, package = "RELSA", help_type = "pdf")
system(paste0("open ",  fun, ".pdf"))
fun <- "relsa_load"
help(fun, package = "RELSA", help_type = "pdf")
system(paste0("open ",  fun, ".pdf"))
fun <- "relsa_norm"
help(fun, package = "RELSA", help_type = "pdf")
system(paste0("open ",  fun, ".pdf"))
fun <- "relsa_plot"
help(fun, package = "RELSA", help_type = "pdf")
system(paste0("open ",  fun, ".pdf"))
fun <- "relsa"
help(fun, package = "RELSA", help_type = "pdf")
system(paste0("open ",  fun, ".pdf"))
fun <- "relsa_R"
help(fun, package = "RELSA", help_type = "pdf")
system(paste0("open ",  fun, ".pdf"))
fun <- "relsa"
help(fun, package = "RELSA", help_type = "pdf")
system(paste0("open ",  fun, ".pdf"))
fun <- "relsa"
help(fun, package = "RELSA", help_type = "pdf")
system(paste0("open ",  fun, ".pdf"))
library(RELSA)
fun <- "relsa_main"
help(fun, package = "RELSA", help_type = "pdf")
system(paste0("open ",  fun, ".pdf"))
library(RELSA)
pack <- "RELSA"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote(path)))
library(RELSA)
getwd()
library(RELSA)
library(RELSA)
library(RELSA)
library(RELSA)
library(RELSA)
devtools::check()
install.packages("qpdf")
devtools::check()
tinytex::tlmgr_install(readLines('https://github.com/yihui/tinytex/raw/master/tools/pkgs-yihui.txt'))
library(RELSA)
library(RELSA)
getwd()
pkgbuild::build()
pkgdown::build_site()
library(RELSA)
pkgdown::build_site()
pkgdown::build_site()
library(RELSA)
source("C:/MHH Bleich/Papers/PostOPPaper/Relsa package/relsa_combis.R")
raw          <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt", treatment = "Transmitter" )
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
org          <- cbind(raw[,1:4], raw[,vars])
pre          <- relsa_norm(org,   normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Papers/PostOPPaper/Relsa package/paper figures/Clusters/", bsl,
filename="Burrowing levels", drops=c("bw","score"), turns=c("hr","mgs","temp"), relsaNA=NA, k=4,
showScree="no", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
saveTiff="no")
levels
################################################################################################################################
# RELSA combinations Burrowing
testraw      <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt", treatment = "Transmitter")
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs"), ontime=1)
mypathname   <- "C:/MHH Bleich/Papers/PostOPPaper/Relsa package/paper figures/RELSA_Combis.txt"
# RELSA combinations
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
result       <- relsa_combis(testset, bsl, vars,
drops=c("bw","score","mgs30","mgs180"),
turns=c("hr", "mgs","temp" ),
skipCalc =FALSE, mypathname=mypathname)
summen       <- result[[1]]
permuts      <- result[[2]]
combis       <- result[[3]]
### Visualize the MEAN result ####################
meanscores   <-  as.data.frame(summen/length(unique(testset$id)))
# Plotting mean time point performances
zeitpunkt    <- 6
thr          <- max(meanscores[zeitpunkt,], na.rm=TRUE) - max(meanscores[zeitpunkt,], na.rm=TRUE)/100*10 # 10% threshold
plot( as.numeric(meanscores[zeitpunkt,]), pch=19, ylim=c(0,1.2), ylab="Average RELSA score", xlab="Variable combination index")
abline(h=thr, col="red", lwd=1)
abline(h=levels$level1, lwd=1, lty=2)
abline(h=levels$level2, lwd=1, lty=2)
abline(h=levels$level3, lwd=1, lty=2)
abline(h=levels$level4, lwd=1, lty=2)
legend("topright", c( "mean RELSA score", "RELSA levels","10 % threshold"),
pch=c(19,NA,NA), lty=c(NA,2,1), col=c("black","black","red"), bty="n", cex=0.8)
thr          <- max(meanscores[zeitpunkt,], na.rm=TRUE) - max(meanscores[zeitpunkt,], na.rm=TRUE)/100*10 # 10% threshold
plot( as.numeric(meanscores[zeitpunkt,]), pch=19, ylim=c(0,1.2), ylab="Average RELSA score", xlab="Variable combination index")
abline(h=thr, col="red", lwd=1)
abline(h=levels$level1, lwd=1, lty=2)
abline(h=levels$level2, lwd=1, lty=2)
abline(h=levels$level3, lwd=1, lty=2)
abline(h=levels$level4, lwd=1, lty=2)
legend("topright", c( "mean RELSA score", "RELSA levels","10 % threshold"),
pch=c(19,NA,NA), lty=c(NA,2,1), col=c("black","black","red"), bty="n", cex=0.8)
zeitpunkt    <- 1
thr          <- max(meanscores[zeitpunkt,], na.rm=TRUE) - max(meanscores[zeitpunkt,], na.rm=TRUE)/100*10 # 10% threshold
plot( as.numeric(meanscores[zeitpunkt,]), pch=19, ylim=c(0,1.2), ylab="Average RELSA score", xlab="Variable combination index")
abline(h=thr, col="red", lwd=1)
abline(h=levels$level1, lwd=1, lty=2)
abline(h=levels$level2, lwd=1, lty=2)
abline(h=levels$level3, lwd=1, lty=2)
abline(h=levels$level4, lwd=1, lty=2)
zeitpunkt    <- 2
zeitpunkt    <- 2
thr          <- max(meanscores[zeitpunkt,], na.rm=TRUE) - max(meanscores[zeitpunkt,], na.rm=TRUE)/100*10 # 10% threshold
plot( as.numeric(meanscores[zeitpunkt,]), pch=19, ylim=c(0,1.2), ylab="Average RELSA score", xlab="Variable combination index")
abline(h=thr, col="red", lwd=1)
abline(h=levels$level1, lwd=1, lty=2)
abline(h=levels$level2, lwd=1, lty=2)
abline(h=levels$level3, lwd=1, lty=2)
abline(h=levels$level4, lwd=1, lty=2)
thr          <- max(meanscores[zeitpunkt,], na.rm=TRUE) - max(meanscores[zeitpunkt,], na.rm=TRUE)/100*10 # 10% threshold
plot( as.numeric(meanscores[zeitpunkt,]), pch=19, ylim=c(0,1.2), ylab="Performance", xlab="Variable index")
abline(h=thr, col="red", lwd=1)
abline(h=levels$level1, lwd=1, lty=2)
abline(h=levels$level2, lwd=1, lty=2)
abline(h=levels$level3, lwd=1, lty=2)
abline(h=levels$level4, lwd=1, lty=2)
### Training the model ##############
# 1. load package
# 2. load raw data for basic model and parameter estimation (relsa_load)
# 3. define the included variables in the model (vars)
# 4. define the negative variables that are "turned"
# 5. normalize the variables to a range [0;100] (relsa_norm)
# 6. calculate relsa model characteristics (relsa_baseline)
library(RELSA)
library(ROCR)
############ BSL & General ##################
# load some data and subsets
raw          <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt", treatment = "Transmitter" )
### Preprocessing (normalization)
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
org          <- cbind(raw[,1:4], raw[,vars])
pre          <- relsa_norm(org,   normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
### Baseline (unscaled BUT PREPROCESSED data): THE BSL Values are NORMALIZED!
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
bsl
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Papers/PostOPPaper/Relsa package/paper figures/Clusters/", bsl,
filename="Burrowing levels", drops=c("bw","score"), turns=c("hr","mgs","temp"), relsaNA=NA, k=4,
showScree="no", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
saveTiff="yes")
### Testing the model ###############
# 1. Run the baseline estimation above
# 2. load raw data for basic model and parameter estimation (relsa_load)
# 3. Determine the filtered variables and build a testframe (testset)
# 4. normalize the variables to a range [0;100] (relsa_norm)
# 5. Re-scale "positive" variables (relsa_scaleTurn)
##### Laura Model Single Tests #########################################
testraw      <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt" )
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
animal       <- 13
RELSA        <- relsa(set=testset, bsl, a=animal, drop=c("bw","score","mgs30","mgs180" ), turnvars=c("hr", "mgs","temp" ), relsaNA=NA)
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
testset[testset$id==unique(testset$id)[animal],]
# show raw data + RELSA
plotset       <- relsa_plot(pre_test, RELSA, levels=levels, animal=animal, plotvar=NULL,
plotRELSA=TRUE, myylim=c(80,120), myYlim=c(0,1.4))
raw
############ BSL & General ##################
# load some data and subsets
raw          <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt", treatment = "Transmitter" )
### Preprocessing (normalization)
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
org          <- cbind(raw[,1:4], raw[,vars])
pre          <- relsa_norm(org,   normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
### Baseline (unscaled BUT PREPROCESSED data): THE BSL Values are NORMALIZED!
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
bsl
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Papers/PostOPPaper/Relsa package/paper figures/Clusters/", bsl,
filename="Burrowing levels", drops=c("bw","score"), turns=c("hr","mgs","temp"), relsaNA=NA, k=4,
showScree="no", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
saveTiff="yes")
### Testing the model ###############
# 1. Run the baseline estimation above
# 2. load raw data for basic model and parameter estimation (relsa_load)
# 3. Determine the filtered variables and build a testframe (testset)
# 4. normalize the variables to a range [0;100] (relsa_norm)
# 5. Re-scale "positive" variables (relsa_scaleTurn)
##### Laura Model Single Tests #########################################
testraw      <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt" )
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
animal       <- 13
RELSA        <- relsa(set=testset, bsl, a=animal, drop=c("bw","score","mgs30","mgs180" ), turnvars=c("hr", "mgs","temp" ), relsaNA=NA)
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
testset[testset$id==unique(testset$id)[animal],]
library(RELSA)
library(ROCR)
############ BSL & General ##################
# load some data and subsets
raw          <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt", treatment = "Transmitter" )
### Preprocessing (normalization)
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
org          <- cbind(raw[,1:4], raw[,vars])
pre          <- relsa_norm(org,   normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
### Baseline (unscaled BUT PREPROCESSED data): THE BSL Values are NORMALIZED!
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
bsl
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Papers/PostOPPaper/Relsa package/paper figures/Clusters/", bsl,
filename="Burrowing levels", drops=c("bw","score"), turns=c("hr","mgs","temp"), relsaNA=NA, k=4,
showScree="no", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
saveTiff="yes")
### Testing the model ###############
# 1. Run the baseline estimation above
# 2. load raw data for basic model and parameter estimation (relsa_load)
# 3. Determine the filtered variables and build a testframe (testset)
# 4. normalize the variables to a range [0;100] (relsa_norm)
# 5. Re-scale "positive" variables (relsa_scaleTurn)
##### Laura Model Single Tests #########################################
testraw      <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt" )
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
animal       <- 13
RELSA        <- relsa(set=testset, bsl, a=animal, drop=c("bw","score","mgs30","mgs180" ), turnvars=c("hr", "mgs","temp" ), relsaNA=NA)
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
testset[testset$id==unique(testset$id)[animal],]
qplot(testset$act, RELSA$relsa$rms)
library(ggplot2)
qplot(testset$act, RELSA$relsa$rms)
qplot(testset$bwc, testset$bwc)
qplot(testset$bwc, testset$act)
qplot(testset$bwc, testset$act, xlab="bwc")
?qplot
pre_test
plot(df$day, df$rms, pch=19, xlab="day", ylab="RELSA score" )
# show the distribution of all data
df   <-NULL
for(i in 1:length(unique(testset$id))){
animal       <- i
R            <- relsa(testset, bsl, a=animal, drop=NULL, turnvars=c("hr","mgs","temp"), relsaNA=NA)$relsa
C            <- pre_test[pre_test$id==unique(pre_test$id)[animal],"condition"]
df           <- rbind(df, data.frame(id=unique(pre_test$id)[animal], day=R$days, condition=C,  R=R$rms))
}
#colors = NULL
#colors[df$condition=="Carprofen"]<- "red"
#colors[df$condition!="Carprofen"]<- "blue"
plot(df$day, df$rms, pch=19, xlab="day", ylab="RELSA score" )
qplot(df$day, df$rms, pch=19, xlab="day", ylab="RELSA score" )
df$day
df$rms
qplot(df$day, df$rms,   )
qplot(df$day, df$rms    )
plot(df$day, df$rms, pch=19, xlab="day", ylab="RELSA score" )
library(RELSA)
#source("C:/MHH Bleich/Papers/PostOPPaper/Relsa package/Paper_Clustering_Laufrad.R")
source("C:/MHH Bleich/Papers/PostOPPaper/Relsa package/paper figures/Paper R Scripts/daily_fractions.R")
############ BSL & General ##################
raw          <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laufrad.txt" )
vars         <- c("bwc","hr", "rr","hrv", "act", "rotdark" ) #, "rot20", "vmax"
turnvars     <- c("hr" )
org          <- cbind(raw[,1:4], raw[,vars])
pre          <- relsa_norm(org,  normthese=c("hr", "rr","hrv", "act", "rotdark" ), ontime=1)
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Papers/PostOPPaper/Relsa package/paper figures/Clusters/", bsl,
filename="RW levels", drops=NULL, turns="hr", relsaNA=NA, k=4,
showScree="no", customCol= c("green","magenta","blue","red"), seed=123, myYlim=c(0,1.4),
saveTiff="yes")
raw
library(RELSA)
library(ROCR)
############ BSL & General ##################
# load some data and subsets
raw          <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt", treatment = "Transmitter" )
### Preprocessing (normalization)
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
org          <- cbind(raw[,1:4], raw[,vars])
pre          <- relsa_norm(org,   normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
### Baseline (unscaled BUT PREPROCESSED data): THE BSL Values are NORMALIZED!
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
bsl
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Papers/PostOPPaper/Relsa package/paper figures/Clusters/", bsl,
filename="Burrowing levels", drops=c("bw","score"), turns=c("hr","mgs","temp"), relsaNA=NA, k=4,
showScree="no", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
saveTiff="yes")
### Testing the model ###############
# 1. Run the baseline estimation above
# 2. load raw data for basic model and parameter estimation (relsa_load)
# 3. Determine the filtered variables and build a testframe (testset)
# 4. normalize the variables to a range [0;100] (relsa_norm)
# 5. Re-scale "positive" variables (relsa_scaleTurn)
##### Laura Model Single Tests #########################################
testraw      <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt" )
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
animal       <- 13
RELSA        <- relsa(set=testset, bsl, a=animal, drop=c("bw","score","mgs30","mgs180" ), turnvars=c("hr", "mgs","temp" ), relsaNA=NA)
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
testset[testset$id==unique(testset$id)[animal],]
# show raw data + RELSA
plotset       <- relsa_plot(pre_test, RELSA, levels=levels, animal=animal, plotvar=NULL,
plotRELSA=TRUE, myylim=c(80,120), myYlim=c(0,1.4))
