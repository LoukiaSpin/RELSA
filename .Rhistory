turnsQuery = turnvars,
dropsQuery = NULL,
studylabel = "A",
animalnr   = 2)
robj$relsamax
ggboxplot(robj$df,
x        = "day",
y        = "rms",
color    = "condition",
add      = "jitter",
ylab     = "RELSA score",
xlab     = "day",
palette  = "jco",
facet.by = "treatment",
short.panel.labs = FALSE,
ylim    = c(0,1.5))
library(readxl)
library(RELSA)
library("FactoMineR")
library(ggplot2)
library(ggpubr)
datapath  <- "C:/MHH Bleich/Aktuelles/Riedesel_RELSA/data/RELSA_Templet.xlsx"
figs      <- "C:/MHH Bleich/Aktuelles/Riedesel_RELSA/Figs/"
set       <-  data.frame(read_excel(datapath , sheet = 2))
# Make the table RELSA accessible -----------------------------------------
df        <- data.frame(id=set$animal_id, treatment=set$treatment, condition=set$condition, day=set$day)
df        <- cbind(df, set[,9:dim(set)[2]])
# Prepare RELSA reference model -------------------------------------------
### Preprocessing (normalization)
# select the treatment n out of 6
refdata   <- df[df$treatment==unique(df$treatment)[1],]
#vars      <- c("bw","clinscore", "nesting_rat", "burrowing_rat", "openfield_rat", "balancebeam_rat", "Playing_Time",
#                  "Playing_Frequency", "Following_Time", "Following_Frequency")
vars      <- c("bw", "nesting_rat", "burrowing_rat")
turnvars  <-   "nesting_rat"
org       <- cbind(refdata[,1:4], refdata[,vars])
pre       <- relsa_norm(org,   normthese=vars, ontime=1)
bsl       <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
bsl
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Aktuelles/Riedesel_RELSA/Figs/", bsl=bsl,
filename="Levels", drops=NULL, turns=turnvars, relsaNA=NA, k=4,
showScree="yes", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
showPlot="yes", saveTiff="yes")
# Calculate RELSA object with all data ------------------------------------
normis    <- vars
unique(df$treatment)
unique(df$condition)
robj      <- relsa_wrapper(querydata  = df,
baseline   = bsl,
treatment  = "6-OHDA",
condition  = NULL,
normthese  = normis,
turnsQuery = turnvars,
dropsQuery = NULL,
studylabel = "A",
animalnr   = 2)
robj$relsamax
# Boxplot
p1  <- ggboxplot(robj$df,
x        = "day",
y        = "rms",
color    = "condition",
add      = "jitter",
ylab     = "RELSA score",
xlab     = "day",
palette  = "jco",
facet.by = "treatment",
short.panel.labs = FALSE,
ylim    = c(0,1.5))  +
theme(text = element_text(size=11)) +
stat_summary(fun.y=mean, geom="point", shape=20, size=4, color="red", fill="red")
p1  <- p1 + facet_grid(treatment ~ condition)
p1  <- p1 + geom_hline(yintercept=1, colour="black", lty=2)
p1  <- p1 + theme(legend.position = "none")
p1
library(readxl)
library(RELSA)
library("FactoMineR")
library(ggplot2)
library(ggpubr)
datapath  <- "C:/MHH Bleich/Aktuelles/Riedesel_RELSA/data/RELSA_Templet.xlsx"
figs      <- "C:/MHH Bleich/Aktuelles/Riedesel_RELSA/Figs/"
set       <-  data.frame(read_excel(datapath , sheet = 2))
# Make the table RELSA accessible -----------------------------------------
df        <- data.frame(id=set$animal_id, treatment=set$treatment, condition=set$condition, day=set$day)
df        <- cbind(df, set[,9:dim(set)[2]])
# Prepare RELSA reference model -------------------------------------------
### Preprocessing (normalization)
# select the treatment n out of 6
refdata   <- df[df$treatment==unique(df$treatment)[1],]
#vars      <- c("bw","clinscore", "nesting_rat", "burrowing_rat", "openfield_rat", "balancebeam_rat", "Playing_Time",
#                  "Playing_Frequency", "Following_Time", "Following_Frequency")
vars      <- c("bw", "nesting_rat", "burrowing_rat")
turnvars  <-   "nesting_rat"
org       <- cbind(refdata[,1:4], refdata[,vars])
pre       <- relsa_norm(org,   normthese=vars, ontime=1)
bsl       <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
bsl
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Aktuelles/Riedesel_RELSA/Figs/", bsl=bsl,
filename="Levels", drops=NULL, turns=turnvars, relsaNA=NA, k=4,
showScree="yes", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
showPlot="yes", saveTiff="yes")
# Calculate RELSA object with all data ------------------------------------
normis    <- vars
unique(df$treatment)
unique(df$condition)
robj      <- relsa_wrapper(querydata  = df,
baseline   = bsl,
treatment  = NULL,
condition  = NULL,
normthese  = normis,
turnsQuery = turnvars,
dropsQuery = NULL,
studylabel = "A",
animalnr   = 2)
robj$relsamax
# Boxplot
p1  <- ggboxplot(robj$df,
x        = "day",
y        = "rms",
color    = "condition",
add      = "jitter",
ylab     = "RELSA score",
xlab     = "day",
palette  = "jco",
facet.by = "treatment",
short.panel.labs = FALSE,
ylim    = c(0,1.5))  +
theme(text = element_text(size=11)) +
stat_summary(fun.y=mean, geom="point", shape=20, size=4, color="red", fill="red")
p1  <- p1 + facet_grid(treatment ~ condition)
p1  <- p1 + geom_hline(yintercept=1, colour="black", lty=2)
p1  <- p1 + theme(legend.position = "none")
p1
library(readxl)
library(RELSA)
library("FactoMineR")
datapath  <- "C:/MHH Bleich/Aktuelles/Riedesel_RELSA/data/RELSA_Templet.xlsx"
figs      <- "C:/MHH Bleich/Aktuelles/Riedesel_RELSA/Figs/"
set       <-  data.frame(read_excel(datapath , sheet = 2))
# Make the table RELSA accessible -----------------------------------------
df        <- data.frame(id=set$animal_id, treatment=set$treatment, condition=set$condition, day=set$day)
df        <- cbind(df, set[,9:dim(set)[2]])
# Prepare RELSA reference model -------------------------------------------
### Preprocessing (normalization)
# select the treatment n out of 6
refdata   <- df[df$treatment==unique(df$treatment)[1],]
vars      <- c("bw", "nesting_rat", "burrowing_rat")
turnvars  <- "nesting_rat"
org       <- cbind(refdata[,1:4], refdata[,vars])
pre       <- relsa_norm(org,   normthese=vars, ontime=1)
bsl       <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
bsl
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Aktuelles/Riedesel_RELSA/Figs/", bsl=bsl,
filename="Levels", drops=NULL, turns=turnvars, relsaNA=NA, k=4,
showScree="yes", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
showPlot="yes", saveTiff="yes")
# Calculate RELSA object with all data ------------------------------------
normis    <- vars
unique(df$treatment)
unique(df$condition)
robj      <- relsa_wrapper(querydata  = df,
baseline   = bsl,
treatment  = "6-OHDA",
condition  = NULL,
normthese  = normis,
turnsQuery = turnvars,
dropsQuery = NULL,
studylabel = "A",
animalnr   = 2)
robj$relsamax
# Permutation -------------------------------------------------------------
testset <- robj$normalized
varis   <- vars
combis           <- expand.grid(rep(list(0:1), length(varis)))
colnames(combis) <- varis
combis           <- combis[-1,]
# permute the shite
PF <- NULL
for(j in 1:dim(combis)[1]){
dt          <- testset[, c( c("id", "treatment", "condition", "day"), varis[ combis[j,]==1 ]) ]
for(t in 1:length(unique(testset$id))){
myturns   <- names(dt)[5:length(names(dt))] [ names(dt)[5:length(names(dt))] %in% turnvars]
if(length(myturns) == 0){
myturns <- NULL
}else{
myturns <- myturns
}
R         <- relsa(set=dt, bsl, a=t, drop=NULL, turnvars=myturns, relsaNA=NA)$relsa$rms
pf        <- data.frame(id        = unique(dt$id),
treatment = unique(dt$treatment),
condition = unique(dt$condition),
day       = unique(dt$day),
rms       = R,
combis    = paste(varis[ combis[j,]==1 ], collapse="/"))
PF        <- rbind(PF, pf)
}
print(j)
}
PF
plot(PF$day, PF$combis)
plot(PF$day, PF$rms)
PF
vars      <- c("bw","clinscore", "nesting_rat", "burrowing_rat")
for(i in 1:length(vars)){
turnvars  <- "nesting_rat"
org       <- cbind(refdata[,1:4], refdata[,vars[1:i]])
pre       <- relsa_norm(org,   normthese=vars, ontime=1)
bsl       <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
bsl
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Aktuelles/Riedesel_RELSA/Figs/", bsl=bsl,
filename="Levels", drops=NULL, turns=turnvars, relsaNA=NA, k=4,
showScree="yes", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
showPlot="yes", saveTiff="yes")
}
turnvars  <- "nesting_rat"
org       <- cbind(refdata[,1:4], refdata[,vars[1:i]])
pre       <- relsa_norm(org,   normthese=vars, ontime=1)
bsl       <- relsa_baselines(dataset=pre, bslday=-1, variables=vars[1:i], turnvars=turnvars)
bsl
turnvars  <- "nesting_rat"
org       <- cbind(refdata[,1:4], refdata[,vars[1:i]])
pre       <- relsa_norm(org,   normthese=vars, ontime=1)
bsl       <- relsa_baselines(dataset=pre, bslday=-1, variables=vars[1:i], turnvars=turnvars)
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Aktuelles/Riedesel_RELSA/Figs/", bsl=bsl,
filename="Levels", drops=NULL, turns=turnvars, relsaNA=NA, k=4,
showScree="no", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
showPlot="no", saveTiff="no")
turnvars  <- "nesting_rat"
org       <- cbind(refdata[,1:4], refdata[,vars[1:i]])
pre       <- relsa_norm(org,   normthese=vars, ontime=1)
bsl       <- relsa_baselines(dataset=pre, bslday=-1, variables=vars[1:i], turnvars=turnvars)
turnvars  <- NULL
org       <- cbind(refdata[,1:4], refdata[,vars[1:i]])
pre       <- relsa_norm(org,   normthese=vars, ontime=1)
bsl       <- relsa_baselines(dataset=pre, bslday=-1, variables=vars[1:i], turnvars=turnvars)
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Aktuelles/Riedesel_RELSA/Figs/", bsl=bsl,
filename="Levels", drops=NULL, turns=turnvars, relsaNA=NA, k=4,
showScree="no", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
showPlot="no", saveTiff="no")
turnvars  <- NULL
org       <- cbind(refdata[,1:4], refdata[,vars[1:i]])
pre       <- relsa_norm(org,   normthese=vars, ontime=1)
bsl       <- relsa_baselines(dataset=pre, bslday=-1, variables=vars[1:i], turnvars=turnvars)
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Aktuelles/Riedesel_RELSA/Figs/", bsl=bsl,
filename="Levels", drops=NULL, turns=turnvars, relsaNA=NA, k=4,
showScree="no", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
showPlot="no", saveTiff="no")
turnvars  <- NULL
org       <- cbind(refdata[,1:4], refdata[,vars[1:i]])
pre       <- relsa_norm(org,   normthese=vars, ontime=1)
bsl       <- relsa_baselines(dataset=pre, bslday=-1, variables=vars[1:i], turnvars=turnvars)
library(readxl)
library(RELSA)
library("FactoMineR")
datapath  <- "C:/MHH Bleich/Aktuelles/Riedesel_RELSA/data/RELSA_Templet.xlsx"
figs      <- "C:/MHH Bleich/Aktuelles/Riedesel_RELSA/Figs/"
set       <-  data.frame(read_excel(datapath , sheet = 2))
# Make the table RELSA accessible -----------------------------------------
df        <- data.frame(id=set$animal_id, treatment=set$treatment, condition=set$condition, day=set$day)
df        <- cbind(df, set[,9:dim(set)[2]])
# Prepare RELSA reference model -------------------------------------------
### Preprocessing (normalization)
# select the treatment n out of 6
refdata   <- df[df$treatment==unique(df$treatment)[1],]
vars
turnvars  <- NULL
org       <- cbind(refdata[,1:4], refdata[,vars[1:i]])
pre       <- relsa_norm(org,   normthese=vars, ontime=1)
for(i in 1:length(vars)){
turnvars  <- NULL
org       <- cbind(refdata[,1:4], refdata[,vars[1:i]])
pre       <- relsa_norm(org,   normthese=vars, ontime=1)
bsl       <- relsa_baselines(dataset=pre, bslday=-1, variables=vars[1:i], turnvars=turnvars)
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Aktuelles/Riedesel_RELSA/Figs/", bsl=bsl,
filename="Levels", drops=NULL, turns=turnvars, relsaNA=NA, k=4,
showScree="no", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
showPlot="no", saveTiff="no")
}
i
i
turnvars  <- NULL
org       <- cbind(refdata[,1:4], refdata[,vars[1:i]])
pre       <- relsa_norm(org,   normthese=vars, ontime=1)
bsl       <- relsa_baselines(dataset=pre, bslday=-1, variables=vars[1:i], turnvars=turnvars)
vars[1:i]
turnvars
pre
turnvars  <- NULL
org       <- cbind(refdata[,1:4], refdata[,vars[1:i]])
pre       <- relsa_norm(org,   normthese=vars[1:i], ontime=1)
bsl       <- relsa_baselines(dataset=pre, bslday=-1, variables=vars[1:i], turnvars=turnvars)
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Aktuelles/Riedesel_RELSA/Figs/", bsl=bsl,
filename="Levels", drops=NULL, turns=turnvars, relsaNA=NA, k=4,
showScree="no", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
showPlot="no", saveTiff="no")
turnvars  <- NULL
org       <- cbind(refdata[,1:4], refdata[,vars[1:i]])
pre       <- relsa_norm(org,   normthese=vars[1:i], ontime=1)
bsl       <- relsa_baselines(dataset=pre, bslday=-1, variables=vars[1:i], turnvars=turnvars)
pre
vars[1:i]
library(readxl)
library(RELSA)
library("FactoMineR")
datapath  <- "C:/MHH Bleich/Aktuelles/Riedesel_RELSA/data/RELSA_Templet.xlsx"
figs      <- "C:/MHH Bleich/Aktuelles/Riedesel_RELSA/Figs/"
set       <-  data.frame(read_excel(datapath , sheet = 2))
# Make the table RELSA accessible -----------------------------------------
df        <- data.frame(id=set$animal_id, treatment=set$treatment, condition=set$condition, day=set$day)
df        <- cbind(df, set[,9:dim(set)[2]])
# Prepare RELSA reference model -------------------------------------------
### Preprocessing (normalization)
# select the treatment n out of 6
refdata   <- df[df$treatment==unique(df$treatment)[1],]
vars      <- c("bw", "nesting_rat", "burrowing_rat")
turnvars  <- "nesting_rat"
org       <- cbind(refdata[,1:4], refdata[,vars])
pre       <- relsa_norm(org,   normthese=vars, ontime=1)
bsl       <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
bsl
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Aktuelles/Riedesel_RELSA/Figs/", bsl=bsl,
filename="Levels", drops=NULL, turns=turnvars, relsaNA=NA, k=4,
showScree="yes", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
showPlot="yes", saveTiff="yes")
# Calculate RELSA object with all data ------------------------------------
normis    <- vars
unique(df$treatment)
unique(df$condition)
robj      <- relsa_wrapper(querydata  = df,
baseline   = bsl,
treatment  = "6-OHDA",
condition  = NULL,
normthese  = normis,
turnsQuery = turnvars,
dropsQuery = NULL,
studylabel = "A",
animalnr   = 2)
robj$relsamax
library(readxl)
library(RELSA)
library("FactoMineR")
datapath  <- "C:/MHH Bleich/Aktuelles/Riedesel_RELSA/data/RELSA_Templet.xlsx"
figs      <- "C:/MHH Bleich/Aktuelles/Riedesel_RELSA/Figs/"
set       <-  data.frame(read_excel(datapath , sheet = 2))
# Make the table RELSA accessible -----------------------------------------
df        <- data.frame(id=set$animal_id, treatment=set$treatment, condition=set$condition, day=set$day)
df        <- cbind(df, set[,9:dim(set)[2]])
df
library(readxl)
library(RELSA)
library("FactoMineR")
datapath  <- "C:/MHH Bleich/Aktuelles/Riedesel_RELSA/data/RELSA_Templet.xlsx"
figs      <- "C:/MHH Bleich/Aktuelles/Riedesel_RELSA/Figs/"
set       <-  data.frame(read_excel(datapath , sheet = 2))
# Make the table RELSA accessible -----------------------------------------
df        <- data.frame(id=set$animal_id, treatment=set$treatment, condition=set$condition, day=set$day)
df        <- cbind(df, set[,9:dim(set)[2]])
# Prepare RELSA reference model -------------------------------------------
### Preprocessing (normalization)
# select the treatment n out of 6
refdata   <- df[df$treatment==unique(df$treatment)[1],]
vars      <- c("bw", "nesting_rat", "burrowing_rat")
turnvars  <- "nesting_rat"
org       <- cbind(refdata[,1:4], refdata[,vars])
pre       <- relsa_norm(org,   normthese=vars, ontime=1)
bsl       <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
bsl
refdata   <- df[df$treatment==unique(df$treatment)[1],]
vars      <- c("bw", "nesting_rat", "burrowing_rat")
turnvars  <- NULL
org       <- cbind(refdata[,1:4], refdata[,vars])
pre       <- relsa_norm(org,   normthese=vars, ontime=1)
bsl       <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
bsl
refdata
refdata$burrowing_rat
plot(refdat$day, refdata$burrowing_rat)
plot(refdata$day, refdata$burrowing_rat)
library(readxl)
library(RELSA)
library("FactoMineR")
datapath  <- "C:/MHH Bleich/Aktuelles/Riedesel_RELSA/data/RELSA_Templet.xlsx"
figs      <- "C:/MHH Bleich/Aktuelles/Riedesel_RELSA/Figs/"
set       <-  data.frame(read_excel(datapath , sheet = 2))
# Make the table RELSA accessible -----------------------------------------
df        <- data.frame(id=set$animal_id, treatment=set$treatment, condition=set$condition, day=set$day)
df        <- cbind(df, set[,9:dim(set)[2]])
# Prepare RELSA reference model -------------------------------------------
### Preprocessing (normalization)
# select the treatment n out of 6
refdata   <- df[df$treatment==unique(df$treatment)[1],]
vars      <- c("bw", "nesting_rat", "burrowing_rat")
turnvars  <- NULL
org       <- cbind(refdata[,1:4], refdata[,vars])
pre       <- relsa_norm(org,   normthese=vars, ontime=1)
bsl       <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
bsl
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Aktuelles/Riedesel_RELSA/Figs/", bsl=bsl,
filename="Levels", drops=NULL, turns=turnvars, relsaNA=NA, k=4,
showScree="yes", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
showPlot="yes", saveTiff="yes")
# Calculate RELSA object with all data ------------------------------------
normis    <- vars
unique(df$treatment)
unique(df$condition)
robj      <- relsa_wrapper(querydata  = df,
baseline   = bsl,
treatment  = "6-OHDA",
condition  = NULL,
normthese  = normis,
turnsQuery = turnvars,
dropsQuery = NULL,
studylabel = "A",
animalnr   = 2)
robj$relsamax
# Permutation -------------------------------------------------------------
testset <- robj$normalized
varis   <- vars
combis           <- expand.grid(rep(list(0:1), length(varis)))
colnames(combis) <- varis
combis           <- combis[-1,]
# permute the shite
PF <- NULL
for(j in 1:dim(combis)[1]){
dt          <- testset[, c( c("id", "treatment", "condition", "day"), varis[ combis[j,]==1 ]) ]
for(t in 1:length(unique(testset$id))){
myturns   <- names(dt)[5:length(names(dt))] [ names(dt)[5:length(names(dt))] %in% turnvars]
if(length(myturns) == 0){
myturns <- NULL
}else{
myturns <- myturns
}
R         <- relsa(set=dt, bsl, a=t, drop=NULL, turnvars=myturns, relsaNA=NA)$relsa$rms
pf        <- data.frame(id        = unique(dt$id),
treatment = unique(dt$treatment),
condition = unique(dt$condition),
day       = unique(dt$day),
rms       = R,
combis    = paste(varis[ combis[j,]==1 ], collapse="/"))
PF        <- rbind(PF, pf)
}
print(j)
}
PF
# permute the shite
PF <- NULL
for(j in 1:dim(combis)[1]){
dt          <- testset[, c( c("id", "treatment", "condition", "day"), varis[ combis[j,]==1 ]) ]
for(t in 1:length(unique(testset$id))){
myturns   <- names(dt)[5:length(names(dt))] [ names(dt)[5:length(names(dt))] %in% turnvars]
if(length(myturns) == 0){
myturns <- NULL
}else{
myturns <- myturns
}
R         <- relsa(set=dt, bsl, a=t, drop=NULL, turnvars=myturns, relsaNA=NA)$relsa$rms
pf        <- data.frame(id        = unique(dt$id),
treatment = unique(dt$treatment),
condition = unique(dt$condition),
day       = unique(dt$day),
rms       = R,
combis    = paste(varis[ combis[j,]==1 ], collapse="/"))
PF        <- cbind(PF, pf)
}
print(j)
}
# permute the shite
PF <- NULL
for(j in 1:dim(combis)[1]){
dt          <- testset[, c( c("id", "treatment", "condition", "day"), varis[ combis[j,]==1 ]) ]
for(t in 1:length(unique(testset$id))){
myturns   <- names(dt)[5:length(names(dt))] [ names(dt)[5:length(names(dt))] %in% turnvars]
if(length(myturns) == 0){
myturns <- NULL
}else{
myturns <- myturns
}
R         <- relsa(set=dt, bsl, a=t, drop=NULL, turnvars=myturns, relsaNA=NA)$relsa$rms
pf        <- data.frame(id        = unique(dt$id),
treatment = unique(dt$treatment),
condition = unique(dt$condition),
day       = unique(dt$day),
rms       = R,
combis    = paste(varis[ combis[j,]==1 ], collapse="/"))
PF        <-rbind(PF, pf)
}
print(j)
}
pf
plot(PF$combis, PF$rms)
plot(PF$combis, PF$rms, pch=19)
plot(PF$combis, PF$rms)
plot(  PF$rms)
dim( PF$rms)
dim(PF)
plot(  PF$rms[1:300], PF$rms[301:700])
plot(  PF$rms[1:299], PF$rms[301:700])
length(PF$rms[1:300])
length(PF$rms[301:700])
plot(  PF$rms[1:350], PF$rms[351:700], pch=19)
