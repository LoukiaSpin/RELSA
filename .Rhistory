treatment  = NULL,
condition  = "Endpoint",
normthese  = c("hr","hrv", "temp", "act"),
turnsQuery = "hr",
dropsQuery = NULL,
animalnr   = 2,
studylabel = "A",
colorlabel = mycolors[1],
ymax       = 4)
sepsis_ffm_tot
querydata      <- "C:/MHH Bleich/Papers/PostOPPaper/Data/sepsis_ffm_1h.txt"
querydata = querydata
treatment  = NULL
condition  = "Endpoint"
normthese  = c("hr","hrv", "temp", "act")
turnsQuery = "hr"
dropsQuery = NULL
animalnr   = 2
studylabel = "A"
colorlabel = mycolors[1],
ymax       = 4
querydata      <- "C:/MHH Bleich/Papers/PostOPPaper/Data/sepsis_ffm_1h.txt"
querydata = querydata
treatment  = NULL
condition  = "Endpoint"
normthese  = c("hr","hrv", "temp", "act")
turnsQuery = "hr"
dropsQuery = NULL
animalnr   = 2
studylabel = "A"
colorlabel = mycolors[1]
ymax       = 4
# Load the query data & build test case OR provide the data frame
if(is.data.frame(querydata)){
if ( is.null(treatment)==FALSE & is.null(condition)==FALSE) {
querydata    <- querydata[querydata$treatment==treatment & querydata$condition==condition, ]
print("Done!")
} else if ( is.null(treatment)==FALSE ) {
querydata    <- querydata[querydata$treatment==treatment, ]
print("Done!")
} else if ( is.null(condition)==FALSE) {
querydata    <- querydata[querydata$condition==condition, ]
print("Done!")
}else{
querydata    <- querydata
print("Done!")
}
}else{
querydata  <- relsa_load(querydata, treatment=treatment, condition=condition )
}
testraw      <- querydata
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=normthese, ontime=1)
# apply dropouts to testset before continuing
if( is.null(dropsQuery)==TRUE ){
}else{
testset[names(testset) %in% dropsQuery] <- NULL
}
# calculate the RELSAs
df      <-NULL
profile <- c()
for(i in 1:length(unique(testset$id))){
animal       <- i
R            <- relsa(testset, baseline, a=animal,  drop=dropsQuery, turnvars=turnsQuery, relsaNA=NA)$relsa
R$treatment  <- pre_test[pre_test$id==unique(pre_test$id)[animal],"treatment"]
R$condition  <- pre_test[pre_test$id==unique(pre_test$id)[animal],"condition"]
df           <- rbind(df, data.frame(id=unique(pre_test$id)[animal], day=R$day,
treatment=R$treatment, condition=R$condition, rms=R$rms))
}
?comparative_relsa
comparative_relsa
RELSA::postop
unique(RELSA::postop$treatment)
### Baseline model
raw          <- RELSA::postop
raw          <- raw[raw$treatment=="Transmitter", ]
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp")
org          <- cbind(raw[,1:4], raw[,vars])
pre          <- relsa_norm(org,   normthese=c("hr","hrv", "temp", "act", "mgs" ), ontime=1)
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Papers/Nature RELSA/Figs/", bsl,
filename="Burrowing levels", drops=c("bw","score"), turns=c("hr","mgs","temp"), relsaNA=NA, k=4,
showScree="no", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
saveTiff="no", showPlot="no")
library(RELSA)
querydata      <- "C:/MHH Bleich/Papers/PostOPPaper/Data/sepsis_ffm_1h.txt"
sepsis_ffm_tot <- relsa_wrapper(querydata = querydata,
treatment  = NULL,
condition  = "Endpoint",
normthese  = c("hr","hrv", "temp", "act"),
turnsQuery = "hr",
dropsQuery = NULL,
animalnr   = 2,
studylabel = "A",
colorlabel = mycolors[1],
ymax       = 4)
querydata = querydata
treatment  = NULL
condition  = "Endpoint"
normthese  = c("hr","hrv", "temp", "act")
turnsQuery = "hr"
dropsQuery = NULL
animalnr   = 2
studylabel = "A"
colorlabel = mycolors[1]
ymax       = 4
### Baseline model
raw          <- RELSA::postop
raw          <- raw[raw$treatment=="Transmitter", ]
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp")
org          <- cbind(raw[,1:4], raw[,vars])
pre          <- relsa_norm(org,   normthese=c("hr","hrv", "temp", "act", "mgs" ), ontime=1)
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Papers/Nature RELSA/Figs/", bsl,
filename="Burrowing levels", drops=c("bw","score"), turns=c("hr","mgs","temp"), relsaNA=NA, k=4,
showScree="no", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
saveTiff="no", showPlot="no")
# Load the query data & build test case OR provide the data frame
if(is.data.frame(querydata)){
if ( is.null(treatment)==FALSE & is.null(condition)==FALSE) {
querydata    <- querydata[querydata$treatment==treatment & querydata$condition==condition, ]
print("Done!")
} else if ( is.null(treatment)==FALSE ) {
querydata    <- querydata[querydata$treatment==treatment, ]
print("Done!")
} else if ( is.null(condition)==FALSE) {
querydata    <- querydata[querydata$condition==condition, ]
print("Done!")
}else{
querydata    <- querydata
print("Done!")
}
}else{
querydata  <- relsa_load(querydata, treatment=treatment, condition=condition )
}
querydata
testraw      <- querydata
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=normthese, ontime=1)
testset
# apply dropouts to testset before continuing
if( is.null(dropsQuery)==TRUE ){
}else{
testset[names(testset) %in% dropsQuery] <- NULL
}
testset
# calculate the RELSAs
df      <-NULL
profile <- c()
for(i in 1:length(unique(testset$id))){
animal       <- i
R            <- relsa(testset, baseline, a=animal,  drop=dropsQuery, turnvars=turnsQuery, relsaNA=NA)$relsa
R$treatment  <- pre_test[pre_test$id==unique(pre_test$id)[animal],"treatment"]
R$condition  <- pre_test[pre_test$id==unique(pre_test$id)[animal],"condition"]
df           <- rbind(df, data.frame(id=unique(pre_test$id)[animal], day=R$day,
treatment=R$treatment, condition=R$condition, rms=R$rms))
}
relsa
df      <-NULL
profile <- c()
for(i in 1:length(unique(testset$id))){
animal       <- i
R            <- relsa(testset, bsl=bsl, a=animal,  drop=dropsQuery, turnvars=turnsQuery, relsaNA=NA)$relsa
R$treatment  <- pre_test[pre_test$id==unique(pre_test$id)[animal],"treatment"]
R$condition  <- pre_test[pre_test$id==unique(pre_test$id)[animal],"condition"]
df           <- rbind(df, data.frame(id=unique(pre_test$id)[animal], day=R$day,
treatment=R$treatment, condition=R$condition, rms=R$rms))
}
# calculate the target differences to refmaxdelta per variable
deltascores    <-NULL
for(i in 1:length(unique(testset$id))){
animal           <- i
delta            <- relsa(testset, baseline, a=animal,  drop=dropsQuery, turnvars=turnsQuery, relsaNA=NA)$delta
trt              <- pre_test[pre_test$id==unique(pre_test$id)[animal],"treatment"]
cond             <- pre_test[pre_test$id==unique(pre_test$id)[animal],"condition"]
deltascores      <- rbind(deltascores, data.frame(id=unique(pre_test$id)[animal], day=R$day,
treatment=trt, condition=cond, rms=delta))
}
colnames(deltascores) <- gsub('rms.', "", colnames(deltascores)) # remove rms.
# calculate the target differences to refmaxdelta per variable
deltascores    <-NULL
for(i in 1:length(unique(testset$id))){
animal           <- i
delta            <- relsa(testset, baseline, a=animal,  drop=dropsQuery, turnvars=turnsQuery, relsaNA=NA)$delta
trt              <- pre_test[pre_test$id==unique(pre_test$id)[animal],"treatment"]
cond             <- pre_test[pre_test$id==unique(pre_test$id)[animal],"condition"]
deltascores      <- rbind(deltascores, data.frame(id=unique(pre_test$id)[animal], day=R$day,
treatment=trt, condition=cond, rms=delta))
}
deltascores    <-NULL
for(i in 1:length(unique(testset$id))){
animal           <- i
delta            <- relsa(testset, bsl=bsl, a=animal,  drop=dropsQuery, turnvars=turnsQuery, relsaNA=NA)$delta
trt              <- pre_test[pre_test$id==unique(pre_test$id)[animal],"treatment"]
cond             <- pre_test[pre_test$id==unique(pre_test$id)[animal],"condition"]
deltascores      <- rbind(deltascores, data.frame(id=unique(pre_test$id)[animal], day=R$day,
treatment=trt, condition=cond, rms=delta))
}
colnames(deltascores) <- gsub('rms.', "", colnames(deltascores)) # remove rms.
# calculate the relsa weights
relsaweights   <-NULL
for(i in 1:length(unique(testset$id))){
animal       <- i
rw           <- relsa(testset, baseline, a=animal,  drop=dropsQuery, turnvars=turnsQuery, relsaNA=NA)$relsa[,-1]
rw[,c("wf","rms")] <- NULL
trt          <- pre_test[pre_test$id==unique(pre_test$id)[animal],"treatment"]
cond         <- pre_test[pre_test$id==unique(pre_test$id)[animal],"condition"]
relsaweights <- rbind(relsaweights, data.frame(id=unique(pre_test$id)[animal], day=R$day,
treatment=trt, condition=cond,  rw) )
}
colnames(relsaweights) <- gsub('rms.', "", colnames(relsaweights)) # remive rms.
# calculate the relsa weights
relsaweights   <-NULL
for(i in 1:length(unique(testset$id))){
animal       <- i
rw           <- relsa(testset, bsl=bls, a=animal,  drop=dropsQuery, turnvars=turnsQuery, relsaNA=NA)$relsa[,-1]
rw[,c("wf","rms")] <- NULL
trt          <- pre_test[pre_test$id==unique(pre_test$id)[animal],"treatment"]
cond         <- pre_test[pre_test$id==unique(pre_test$id)[animal],"condition"]
relsaweights <- rbind(relsaweights, data.frame(id=unique(pre_test$id)[animal], day=R$day,
treatment=trt, condition=cond,  rw) )
}
colnames(relsaweights) <- gsub('rms.', "", colnames(relsaweights)) # remive rms.
testset
length(unique(testset$id))
i
i
animal       <- i
rw           <- relsa(testset, bsl=bls, a=animal,  drop=dropsQuery, turnvars=turnsQuery, relsaNA=NA)$relsa[,-1]
# calculate the relsa weights
relsaweights   <-NULL
for(i in 1:length(unique(testset$id))){
animal       <- i
rw           <- relsa(testset, bsl=bsl, a=animal,  drop=dropsQuery, turnvars=turnsQuery, relsaNA=NA)$relsa[,-1]
rw[,c("wf","rms")] <- NULL
trt          <- pre_test[pre_test$id==unique(pre_test$id)[animal],"treatment"]
cond         <- pre_test[pre_test$id==unique(pre_test$id)[animal],"condition"]
relsaweights <- rbind(relsaweights, data.frame(id=unique(pre_test$id)[animal], day=R$day,
treatment=trt, condition=cond,  rw) )
}
colnames(relsaweights) <- gsub('rms.', "", colnames(relsaweights)) # remive rms.
# Unique animals in the query set
tiere          <- unique(df$id)
# calculate RELSA max for each model (time-independent)
relsamax <- NULL
ddf      <- NULL
for (j in 1:length(tiere)){
relsamax   <- rbind(relsamax, data.frame(id        = tiere[j],
treatment = as.character(df[df$id==tiere[j], 3][1]),
condition = as.character(df[df$id==tiere[j], 4][1]),
relsa     = max( df[df$id==tiere[j], "rms"], na.rm=TRUE) ))
}
# color option the RELSA max table
if(is.null(colorlabel) ==TRUE){
}else{
relsamax$color = colorlabel
}
# add a studylabel for later RELSA max discrimination and subsetting
if(is.null(studylabel)){
}else{
relsamax$label <- studylabel
}
# add a label for the prospective severity
if(is.null(severity)){
}else{
relsamax$severity <- severity
}
severity=NULL
# color option the RELSA max table
if(is.null(colorlabel) ==TRUE){
}else{
relsamax$color = colorlabel
}
# add a studylabel for later RELSA max discrimination and subsetting
if(is.null(studylabel)){
}else{
relsamax$label <- studylabel
}
# add a label for the prospective severity
if(is.null(severity)){
}else{
relsamax$severity <- severity
}
### PCA -variable contributions for the first 2 dimensions
q         <- testset[5:dim(testset)[2]]
if((5-sum(apply(q,2,sum, na.rm=TRUE)==0))==1){
contributions <- NA
}else{
# drop the drops
if(sum(names(q) %in% dropsQuery)==0){
q   <- q[complete.cases(q),]
}else{
nn  <- which(names(q) %in% dropsQuery)
q   <- q[,-nn]
q   <- q[complete.cases(q),]
}
### PCA -variable contributions for the first 2 dimensions
q         <- testset[5:dim(testset)[2]]
if((5-sum(apply(q,2,sum, na.rm=TRUE)==0))==1){
contributions <- NA
}else{
# drop the drops
if(sum(names(q) %in% dropsQuery)==0){
q   <- q[complete.cases(q),]
}else{
nn  <- which(names(q) %in% dropsQuery)
q   <- q[,-nn]
q   <- q[complete.cases(q),]
}
q      <- q[complete.cases(q),]
pca    <- PCA(q, scale.unit = TRUE, graph = FALSE)
if(pcadims==1){
contributions <- pca$var$contrib[, 1]
}else{
contributions <- apply(pca$var$contrib[, 1:pcadims ],1,sum)
}
}
pcadims=2
### PCA -variable contributions for the first 2 dimensions
q         <- testset[5:dim(testset)[2]]
if((5-sum(apply(q,2,sum, na.rm=TRUE)==0))==1){
contributions <- NA
}else{
# drop the drops
if(sum(names(q) %in% dropsQuery)==0){
q   <- q[complete.cases(q),]
}else{
nn  <- which(names(q) %in% dropsQuery)
q   <- q[,-nn]
q   <- q[complete.cases(q),]
}
q      <- q[complete.cases(q),]
pca    <- PCA(q, scale.unit = TRUE, graph = FALSE)
if(pcadims==1){
contributions <- pca$var$contrib[, 1]
}else{
contributions <- apply(pca$var$contrib[, 1:pcadims ],1,sum)
}
}
### Calculate the most changing RELSA Weight!
V <- NULL
for(t in 1:length(tiere)){
v    <- relsaweights[deltascores$id==tiere[t],]
V    <- rbind(V, suppressWarnings( apply( v[5:dim(v)[2]],2, max, na.rm=TRUE )))
is.na(V) <- sapply(V, is.infinite)
}
Change           <- t(data.frame(apply(V,2,mean, na.rm=TRUE)))
colnames(Change) <- colnames(V)
rownames(Change) <- 1
ChangeSD           <- t(data.frame(apply(V,2,sd, na.rm=TRUE)))
colnames(ChangeSD) <- colnames(V)
rownames(ChangeSD) <- 1
Change  [is.nan(Change)]   <- NA
ChangeSD[is.nan(ChangeSD)] <- NA
### Example Animals anschauen
if(is.null(animalnr)){
}else{
tiere <- unique(df$id)
dat   <- df[df$id==tiere[animalnr], ]
plot(dat$day, dat$rms, pch=19, type="b", ylim=c(0,ymax), xlab="time", ylab="RELSA score")
abline(h=1, lty=2, lwd=2)
points(dat$day[which(dat$rms==max(dat$rms, na.rm=TRUE))], max(dat$rms, na.rm=TRUE), pch=1, lwd=2, cex=2.2, col="red")
text(dat$day[which(dat$rms==max(dat$rms, na.rm=TRUE))]  , max(dat$rms, na.rm=TRUE),
labels=max(dat$rms, na.rm=TRUE), cex=0.9, pos=4, col="red")
}
Change           <- t(data.frame(apply(V,2,mean, na.rm=TRUE)))
colnames(Change) <- colnames(V)
rownames(Change) <- 1
ChangeSD           <- t(data.frame(apply(V,2,sd, na.rm=TRUE)))
colnames(ChangeSD) <- colnames(V)
rownames(ChangeSD) <- 1
Change  [is.nan(Change)]   <- NA
ChangeSD[is.nan(ChangeSD)] <- NA
is.null(animalnr)
tiere <- unique(df$id)
dat   <- df[df$id==tiere[animalnr], ]
plot(dat$day, dat$rms, pch=19, type="b", ylim=c(0,ymax), xlab="time", ylab="RELSA score")
abline(h=1, lty=2, lwd=2)
points(dat$day[which(dat$rms==max(dat$rms, na.rm=TRUE))], max(dat$rms, na.rm=TRUE), pch=1, lwd=2, cex=2.2, col="red")
dat$rms
points(dat$day[which(dat$rms==max(dat$rms, na.rm=TRUE))], max(dat$rms, na.rm=TRUE))
class(dat)
dat$day[which(dat$rms==max(dat$rms, na.rm=TRUE))]
max(dat$rms, na.rm=TRUE)
dat
tiere <- unique(df$id)
dat   <- df[df$id==tiere[animalnr], ]
plot(dat$day, dat$rms, pch=19, type="b", ylim=c(0,ymax), xlab="time", ylab="RELSA score")
abline(h=1, lty=2, lwd=2)
tiere <- unique(df$id)
dat   <- df[df$id==tiere[animalnr], ]
plot(dat$day, dat$rms, pch=19, type="b", ylim=c(0,ymax), xlab="time", ylab="RELSA score")
abline(h=1, lty=2, lwd=2)
# points(dat$day[which(dat$rms==max(dat$rms, na.rm=TRUE))], max(dat$rms, na.rm=TRUE), pch=1, lwd=2, cex=2.2, col="red")
text(dat$day[which(dat$rms==max(dat$rms, na.rm=TRUE))]  , max(dat$rms, na.rm=TRUE),
labels=max(dat$rms, na.rm=TRUE), cex=0.9, pos=4, col="red")
dat$day[which(dat$rms==max(dat$rms, na.rm=TRUE))]
dat$day[which(dat$rms==max(dat$rms, na.rm=TRUE))][1]
library(RELSA)
querydata      <- "C:/MHH Bleich/Papers/PostOPPaper/Data/sepsis_ffm_1h.txt"
sepsis_ffm_tot <- relsa_wrapper(querydata = querydata,
treatment  = NULL,
condition  = "Endpoint",
normthese  = c("hr","hrv", "temp", "act"),
turnsQuery = "hr",
dropsQuery = NULL,
animalnr   = 2,
studylabel = "A",
colorlabel = mycolors[1],
ymax       = 4)
sepsis_ffm_tot
# SEPSIS FFM 1h -----------------------------------------------------------
querydata      <- "C:/MHH Bleich/Papers/PostOPPaper/Data/sepsis_ffm_1h.txt"
sepsis_ffm_tot <- comparative_relsa(querydata = querydata,
treatment  = NULL,
condition  = "Endpoint",
normthese  = c("hr","hrv", "temp", "act"),
turnsQuery = "hr",
dropsQuery = NULL,
animalnr   = 2,
studylabel = "A",
colorlabel = mycolors[1],
ymax       = 4)
sepsis_ffm_tot
querydata      <- "C:/MHH Bleich/Papers/PostOPPaper/Data/sepsis_ffm_1h.txt"
sepsis_ffm_tot <- relsa_wrapper(querydata = querydata,
treatment  = NULL,
condition  = "Endpoint",
normthese  = c("hr","hrv", "temp", "act"),
turnsQuery = "hr",
dropsQuery = NULL,
animalnr   = 2,
studylabel = "A",
colorlabel = mycolors[1],
ymax       = 4)
sepsis_ffm_tot
querydata      <- "C:/MHH Bleich/Papers/PostOPPaper/Data/sepsis_ffm_1h.txt"
sepsis_ffm_tot <- relsa_wrapper(querydata = querydata,
treatment  = NULL,
condition  = "Endpoint",
normthese  = c("hr","hrv", "temp", "act"),
turnsQuery = "hr",
dropsQuery = NULL,
animalnr   = 1,
studylabel = "A",
colorlabel = mycolors[1],
ymax       = 4)
dim(dat)
dat
is.na(dat$rms)
is.na(dat$rms)==TRUE
is.na(dat$rms)
as.numeric(is.na(dat$rms))
as.numeric(is.na(dat$rms))==1
as.numeric(is.na(dat$rms))==1[1]
which(as.numeric(is.na(dat$rms))==1)
library(RELSA)
querydata      <- "C:/MHH Bleich/Papers/PostOPPaper/Data/sepsis_ffm_1h.txt"
sepsis_ffm_tot <- relsa_wrapper(querydata = querydata,
treatment  = NULL,
condition  = "Endpoint",
normthese  = c("hr","hrv", "temp", "act"),
turnsQuery = "hr",
dropsQuery = NULL,
animalnr   = 1,
studylabel = "A",
colorlabel = mycolors[1],
ymax       = 4)
library(RELSA)
mycolors       <- c("darkred","red", "purple", "orange", "pink", "cyan", "darkgreen")
querydata      <- "C:/MHH Bleich/Papers/PostOPPaper/Data/sepsis_ffm_1h.txt"
sepsis_ffm_tot <- relsa_wrapper(querydata = querydata,
treatment  = NULL,
condition  = "Endpoint",
normthese  = c("hr","hrv", "temp", "act"),
turnsQuery = "hr",
dropsQuery = NULL,
animalnr   = 1,
studylabel = "A",
colorlabel = mycolors[1],
ymax       = 4)
library(RELSA)
mycolors       <- c("darkred","red", "purple", "orange", "pink", "cyan", "darkgreen")
querydata      <- "C:/MHH Bleich/Papers/PostOPPaper/Data/sepsis_ffm_1h.txt"
sepsis_ffm_tot <- relsa_wrapper(querydata = querydata,
treatment  = NULL,
condition  = "Endpoint",
normthese  = c("hr","hrv", "temp", "act"),
turnsQuery = "hr",
dropsQuery = NULL,
animalnr   = 1,
studylabel = "A",
colorlabel = mycolors[1],
ymax       = 4)
library(RELSA)
library("FactoMineR")
mycolors       <- c("darkred","red", "purple", "orange", "pink", "cyan", "darkgreen")
querydata      <- "C:/MHH Bleich/Papers/PostOPPaper/Data/sepsis_ffm_1h.txt"
sepsis_ffm_tot <- relsa_wrapper(querydata = querydata,
treatment  = NULL,
condition  = "Endpoint",
normthese  = c("hr","hrv", "temp", "act"),
turnsQuery = "hr",
dropsQuery = NULL,
animalnr   = 1,
studylabel = "A",
colorlabel = mycolors[1],
ymax       = 4)
