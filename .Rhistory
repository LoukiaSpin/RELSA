filename="Burrowing levels", drops=c("bw","score"), turns=c("hr","mgs","temp"), relsaNA=NA, k=4,
showScree="no", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
saveTiff="yes")
raw          <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt", treatment = "Transmitter" )
### Preprocessing (normalization)
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
org          <- cbind(raw[,1:4], raw[,vars])
pre          <- relsa_norm(org,   normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
### Baseline (unscaled BUT PREPROCESSED data): THE BSL Values are NORMALIZED!
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars, plotBSL=0)
bsl
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Papers/PostOPPaper/Relsa package/paper figures/Clusters/", bsl,
filename="Burrowing levels", drops=c("bw","score"), turns=c("hr","mgs","temp"), relsaNA=NA, k=4,
showScree="no", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
saveTiff="yes")
### Testing the model ###############
# 1. Run the baseline estimation above
# 2. load raw data for basic model and parameter estimation (relsa_load)
# 3. Determine the filtered variables and build a testframe (testset)
# 4. normalize the variables to a range [0;100] (relsa_norm)
# 5. Re-scale "positive" variables (relsa_scaleTurn)
##### Laura Model Single Tests #########################################
testraw      <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt" )
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
animal       <- 1
RELSA        <- relsa(set=testset, bsl, a=animal, drop=c("bw","score","mgs30","mgs180" ), turnvars=c("hr", "mgs","temp" ), relsaNA=NA)
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
testset[testset$id==unique(testset$id)[animal],]
# show raw data + RELSA
plotset       <- relsa_plot(pre_test, RELSA, levels=levels, animal=animal, plotvar=NULL,
plotRELSA=TRUE, myylim=c(80,120), myYlim=c(0,1.4))
# show the distribution of all data
df   <-NULL
for(i in 1:length(unique(testset$id))){
animal       <- i
R            <- relsa(testset, bsl, a=animal, drop=NULL, turnvars=c("hr","mgs","temp"), relsaNA=NA)$relsa
C            <- pre_test[pre_test$id==unique(pre_test$id)[animal],"condition"]
df           <- rbind(df, data.frame(id=unique(pre_test$id)[animal], day=R$days, condition=C,  R=R$rms))
}
plot(df$day, df$rms, pch=19, xlab="day", ylab="RELSA score" )
##### Marcin Model Single Tests #########################################
testraw      <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/marcin_clp.txt" )
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=c("bwc","temp"), ontime=2)
animal       <- 9 #9
RELSA        <- relsa(testset, bsl, a=animal, drop=NULL, turnvars=c("temp"))
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
plot(RELSA$relsa$wf,    col="black", type="b", pch=19, ylim=c(0,6))
points(RELSA$relsa$rms, col="red",   type="b", pch=19)
# show raw data + RELSA
plotset       <- relsa_plot(testset, levels=levels, RELSA, animal=animal, plotvar=NULL,
plotRELSA=TRUE, myylim=c(70,120), myYlim=c(0,5))
result        <- cbind(plotset, delta=RELSA$delta, wrelsa=RELSA$relsa$rms)
result
# it is better to use the RELSA score and NOT the levels in the original data, because other datasets behave differently!
plot(testset$bwc,  df$rms, pch=19, ylab="RELSA score", xlab="Parameter change", ylim=c(0,9))
plot(testset$temp, df$rms, pch=19, ylab="RELSA score", xlab="Parameter change", ylim=c(0,9))
plot(testset$bwc,  df$rms, pch=19, ylab="RELSA score", xlab="Parameter change", ylim=c(0,9))
### subset
sub            <- subset(df, rms > 2.5 )
sub            <- sub[complete.cases(sub), ]
plot(sub$rms, sub$condition, pch=19, ylab="Probability of death", xlab="RELSA score")
fit            <- glm(condition ~ rms, data=sub, family=binomial )
summary(fit)
curve(predict(fit,data.frame(rms=x),type="resp"),add=TRUE)
points(sub$rms, fitted(fit), pch=20, col="red")
pf             <- data.frame(org=sub$rms, prob= round(predict(fit, relsa = sub$rms , type="response"),2) )
pf             <- pf[order(pf$org), ]
pf
##### Miri Model Single Tests #################################################
testraw      <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op miri.txt", treatment = "Transmitter" )
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=c("mgs","bur2h","burON","hr","hrv","temp","act"), ontime=1)
animal        <- 5
RELSA         <- relsa(set=testset, bsl, a=animal, drop=c("bw","score"), turnvars=c("hr","temp"))
relsascore    <- as.numeric(unlist(RELSA$relsa$rms))
# show raw data + RELSA
plotset       <- relsa_plot(testset, RELSA, levels=levels, animal=animal, plotvar=NULL, plotRELSA=TRUE, myylim=c(70,120), myYlim=c(0,2))
testraw      <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op miri.txt", treatment = "Transmitter" )
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=c("mgs","bur2h","burON","hr","hrv","temp","act"), ontime=1)
animal        <- 1
RELSA         <- relsa(set=testset, bsl, a=animal, drop=c("bw","score"), turnvars=c("hr","temp"))
relsascore    <- as.numeric(unlist(RELSA$relsa$rms))
# show raw data + RELSA
plotset       <- relsa_plot(testset, RELSA, levels=levels, animal=animal, plotvar=NULL, plotRELSA=TRUE, myylim=c(70,120), myYlim=c(0,2))
##### Miri Model Single Tests #################################################
testraw      <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op miri.txt", treatment = "Transmitter" )
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=c("mgs","bur2h","burON","hr","hrv","temp","act"), ontime=1)
animal        <- 2
RELSA         <- relsa(set=testset, bsl, a=animal, drop=c("bw","score"), turnvars=c("hr","temp"))
relsascore    <- as.numeric(unlist(RELSA$relsa$rms))
# show raw data + RELSA
plotset       <- relsa_plot(testset, RELSA, levels=levels, animal=animal, plotvar=NULL, plotRELSA=TRUE, myylim=c(70,120), myYlim=c(0,2))
testset
RELSA
plotset
animal        <- 2
RELSA         <- relsa(set=testset, bsl, a=animal, drop=c("bw","score"), turnvars=c("hr"))
relsascore    <- as.numeric(unlist(RELSA$relsa$rms))
# show raw data + RELSA
plotset       <- relsa_plot(testset, RELSA, levels=levels, animal=animal, plotvar=NULL, plotRELSA=TRUE, myylim=c(70,120), myYlim=c(0,2))
plotset
testraw      <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op miri.txt", treatment = "Transmitter" )
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=c("mgs","bur2h","burON","hr","hrv","temp","act"), ontime=1)
animal        <- 3
RELSA         <- relsa(set=testset, bsl, a=animal, drop=c("bw","score"), turnvars=c("hr"))
relsascore    <- as.numeric(unlist(RELSA$relsa$rms))
# show raw data + RELSA
plotset
animal        <- 33
RELSA         <- relsa(set=testset, bsl, a=animal, drop=c("bw","score"), turnvars=c("hr"))
relsascore    <- as.numeric(unlist(RELSA$relsa$rms))
# show raw data + RELSA
plotset       <- relsa_plot(testset, RELSA, levels=levels, animal=animal, plotvar=NULL, plotRELSA=TRUE, myylim=c(70,120), myYlim=c(0,2))
relsascore
plotset
##### Miri Model Single Tests #################################################
testraw      <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op miri.txt", treatment = "Transmitter" )
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=c("mgs","bur2h","burON","hr","hrv","temp","act"), ontime=1)
animal        <- 30
RELSA         <- relsa(set=testset, bsl, a=animal, drop=c("bw","score"), turnvars=c("hr"))
relsascore    <- as.numeric(unlist(RELSA$relsa$rms))
# show raw data + RELSA
plotset       <- relsa_plot(testset, RELSA, levels=levels, animal=animal, plotvar=NULL, plotRELSA=TRUE, myylim=c(70,120), myYlim=c(0,2))
plotset
# What clusters?
plot(b, pch=19, ylab="RELSA score", ylim=c(0, 2))
points(b, col=mycol, pch=19)
points(b, col=mycol, pch=19)
abline(h=levels$level1, lwd=1, lty=2)
abline(h=levels$level2, lwd=1, lty=2)
abline(h=levels$level3, lwd=1, lty=2)
abline(h=levels$level4, lwd=1, lty=2)
text(40,levels$level1+0.09, levels$level1 )
text(40,levels$level2+0.09, levels$level2 )
text(40,levels$level3+0.09, levels$level3 )
text(40,levels$level4+0.09, levels$level4 )
points(rep(400, length(relsascore)), relsascore, pch=4, lwd=2, cex=1.2)
# show the distribution of all data
df <-NULL
for(i in 1:length(unique(testset$id))){
animal       <- i
R            <- relsa(testset, bsl, a=animal, drop=c("bw","score"), turnvars=c("hr","temp"), relsaNA=NA)$relsa
C            <- pre_test[pre_test$id==unique(pre_test$id)[animal],"condition"]
df           <- rbind(df, data.frame(id=unique(pre_test$id)[animal], day=R$day, condition=C, relsa=R$rms))
}
plot(df$day, df$rms, pch=19, ylab="RELSA score", xlab="day", ylim=c(0,3))
abline(h=max(b), lty=2)
df <-NULL
for(i in 1:length(unique(testset$id))){
animal       <- i
R            <- relsa(testset, bsl, a=animal, drop=c("bw","score"), turnvars=c("hr"), relsaNA=NA)$relsa
C            <- pre_test[pre_test$id==unique(pre_test$id)[animal],"condition"]
df           <- rbind(df, data.frame(id=unique(pre_test$id)[animal], day=R$day, condition=C, relsa=R$rms))
}
plot(df$day, df$rms, pch=19, ylab="RELSA score", xlab="day", ylim=c(0,3))
abline(h=max(b), lty=2)
L = length(unique(df[df$rms>=2.36,]$id))
L
unique(df[df$rms>=max(b),])
which(unique(df$id)=="MH_049")
# it is better to use the RELSA score and NOT the levels in the original data, because other datasets behave differently!
plot(testset$bwc,   df$rms, pch=19, ylab="RELSA score", xlab="Parameter change", ylim=c(0,3))
raw          <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt", treatment = "Transmitter" )
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
org          <- cbind(raw[,1:4], raw[,vars])
pre          <- relsa_norm(org,   normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars, plotBSL=0)
bsl
##### Miri krankes Tier #########################################
testraw      <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/Miri_krankesTier.txt" )
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=c("hr","hrv","temp","act" ), ontime=1)
animal       <- 1
RELSA        <- relsa(set=testset, bsl, a=animal, drop="bwc", turnvars=c("hr" ), relsaNA=NA)
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
# show raw data + RELSA
plotset       <- relsa_plot(testset, RELSA, levels=levels, animal=animal, plotvar=NULL,
plotRELSA=TRUE, myylim=c(1,20), myYlim=c(0,2))
install.packages("pkgdown")
pkgdown::build_site()
pkgdown::build_site()
library(RELSA)
pkgdown::build_site()
library(RELSA)
pkgdown::build_site()
library(RELSA)
pkgdown::build_site()
library(RELSA)
pkgdown::build_site()
library(RELSA)
pkgdown::build_site()
library(RELSA)
pkgdown::build_site()
library(RELSA)
pkgdown::build_site()
library(RELSA)
pkgdown::build_site()
pkgdown::build_site()
library(devtools)
pkgbuild()
library(RELSA)
pkgdown::build_site()
library(RELSA)
library(RELSA)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
build_favicon(pkg = ".")
library(RELSA)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
use_travis()
install.packages("available")
available("RELSA")
library(available)
available("RELSA")
library(usethis)
use_readme_rmd()
?unique
?dim
ßmax
?max
?as.data.frame
?round
?apply
?sqrt
?names
use_package("Rmisc")
library(RELSA)
use_package("Rmisc")
use_package("dichromat")
library(RELSA)
use_package("stats")
?length()
?length
ßmin
?min
library(RELSA)
### Training the model ##############
# 1. load package
# 2. load raw data for basic model and parameter estimation (relsa_load)
# 3. define the included variables in the model (vars)
# 4. define the negative variables that are "turned"
# 5. normalize the variables to a range [0;100] (relsa_norm)
# 6. calculate relsa model characteristics (relsa_baseline)
library(RELSA)
library(ROCR)
############ BSL & General ##################
# load some data and subsets
raw          <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt", treatment = "Transmitter" )
### Preprocessing (normalization)
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
org          <- cbind(raw[,1:4], raw[,vars])
pre          <- relsa_norm(org,   normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
### Baseline (unscaled BUT PREPROCESSED data): THE BSL Values are NORMALIZED!
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars, plotBSL=0)
bsl
org          <- cbind(raw[,1:4], raw[,vars])
pre          <- relsa_norm(org,   normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
### Baseline (unscaled BUT PREPROCESSED data): THE BSL Values are NORMALIZED!
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars, plotBSL=0)
bsl
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Papers/PostOPPaper/Relsa package/paper figures/Clusters/", bsl,
filename="Burrowing levels", drops=c("bw","score"), turns=c("hr","mgs","temp"), relsaNA=NA, k=4,
showScree="no", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
saveTiff="yes")
############ BSL & General ##################
# load some data and subsets
raw          <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt", treatment = "Transmitter" )
### Preprocessing (normalization)
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
org          <- cbind(raw[,1:4], raw[,vars])
pre          <- relsa_norm(org,   normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
### Baseline (unscaled BUT PREPROCESSED data): THE BSL Values are NORMALIZED!
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
bsl
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Papers/PostOPPaper/Relsa package/paper figures/Clusters/", bsl,
filename="Burrowing levels", drops=c("bw","score"), turns=c("hr","mgs","temp"), relsaNA=NA, k=4,
showScree="no", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
saveTiff="yes")
levels
### Testing the model ###############
# 1. Run the baseline estimation above
# 2. load raw data for basic model and parameter estimation (relsa_load)
# 3. Determine the filtered variables and build a testframe (testset)
# 4. normalize the variables to a range [0;100] (relsa_norm)
# 5. Re-scale "positive" variables (relsa_scaleTurn)
##### Laura Model Single Tests #########################################
testraw      <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt" )
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
animal       <- 1
RELSA        <- relsa(set=testset, bsl, a=animal, drop=c("bw","score","mgs30","mgs180" ), turnvars=c("hr", "mgs","temp" ), relsaNA=NA)
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
testset[testset$id==unique(testset$id)[animal],]
# show raw data + RELSA
plotset       <- relsa_plot(pre_test, RELSA, levels=levels, animal=animal, plotvar=NULL,
plotRELSA=TRUE, myylim=c(80,120), myYlim=c(0,1.4))
?graphics
use_package("graphics")
use_package("grDevices")
?order
?set.seed
?kmeans
use_package("stats")
?plot
?colorRampPalette
?append
?paste
?tiff
library(RELSA)
### Training the model ##############
# 1. load package
# 2. load raw data for basic model and parameter estimation (relsa_load)
# 3. define the included variables in the model (vars)
# 4. define the negative variables that are "turned"
# 5. normalize the variables to a range [0;100] (relsa_norm)
# 6. calculate relsa model characteristics (relsa_baseline)
library(RELSA)
library(ROCR)
############ BSL & General ##################
# load some data and subsets
raw          <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt", treatment = "Transmitter" )
### Preprocessing (normalization)
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
org          <- cbind(raw[,1:4], raw[,vars])
pre          <- relsa_norm(org,   normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
### Baseline (unscaled BUT PREPROCESSED data): THE BSL Values are NORMALIZED!
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
bsl
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Papers/PostOPPaper/Relsa package/paper figures/Clusters/", bsl,
filename="Burrowing levels", drops=c("bw","score"), turns=c("hr","mgs","temp"), relsaNA=NA, k=4,
showScree="no", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
saveTiff="yes")
### Testing the model ###############
# 1. Run the baseline estimation above
# 2. load raw data for basic model and parameter estimation (relsa_load)
# 3. Determine the filtered variables and build a testframe (testset)
# 4. normalize the variables to a range [0;100] (relsa_norm)
# 5. Re-scale "positive" variables (relsa_scaleTurn)
##### Laura Model Single Tests #########################################
testraw      <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt" )
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
animal       <- 1
RELSA        <- relsa(set=testset, bsl, a=animal, drop=c("bw","score","mgs30","mgs180" ), turnvars=c("hr", "mgs","temp" ), relsaNA=NA)
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
testset[testset$id==unique(testset$id)[animal],]
# show raw data + RELSA
plotset       <- relsa_plot(pre_test, RELSA, levels=levels, animal=animal, plotvar=NULL,
plotRELSA=TRUE, myylim=c(80,120), myYlim=c(0,1.4))
?read.table
use_package("utils")
?is.null
library(RELSA)
### Testing the model ###############
# 1. Run the baseline estimation above
# 2. load raw data for basic model and parameter estimation (relsa_load)
# 3. Determine the filtered variables and build a testframe (testset)
# 4. normalize the variables to a range [0;100] (relsa_norm)
# 5. Re-scale "positive" variables (relsa_scaleTurn)
##### Laura Model Single Tests #########################################
testraw      <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt" )
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
animal       <- 1
RELSA        <- relsa(set=testset, bsl, a=animal, drop=c("bw","score","mgs30","mgs180" ), turnvars=c("hr", "mgs","temp" ), relsaNA=NA)
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
testset[testset$id==unique(testset$id)[animal],]
# show raw data + RELSA
plotset       <- relsa_plot(pre_test, RELSA, levels=levels, animal=animal, plotvar=NULL,
plotRELSA=TRUE, myylim=c(80,120), myYlim=c(0,1.4))
############ BSL & General ##################
# load some data and subsets
raw          <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt", treatment = "Transmitter" )
?is.infinite
?which
ßplot
?plot
?abline
?mtext
library(RELSA)
library(RELSA)
############ BSL & General ##################
# load some data and subsets
raw          <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt", treatment = "Transmitter" )
### Preprocessing (normalization)
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
org          <- cbind(raw[,1:4], raw[,vars])
pre          <- relsa_norm(org,   normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
### Baseline (unscaled BUT PREPROCESSED data): THE BSL Values are NORMALIZED!
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
bsl
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Papers/PostOPPaper/Relsa package/paper figures/Clusters/", bsl,
filename="Burrowing levels", drops=c("bw","score"), turns=c("hr","mgs","temp"), relsaNA=NA, k=4,
showScree="no", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
saveTiff="yes")
##### Laura Model Single Tests #########################################
testraw      <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt" )
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
animal       <- 1
RELSA        <- relsa(set=testset, bsl, a=animal, drop=c("bw","score","mgs30","mgs180" ), turnvars=c("hr", "mgs","temp" ), relsaNA=NA)
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
testset[testset$id==unique(testset$id)[animal],]
# show raw data + RELSA
plotset       <- relsa_plot(pre_test, RELSA, levels=levels, animal=animal, plotvar=NULL,
plotRELSA=TRUE, myylim=c(80,120), myYlim=c(0,1.4))
plotset
relsa_plot
animal       <- 3
RELSA        <- relsa(set=testset, bsl, a=animal, drop=c("bw","score","mgs30","mgs180" ), turnvars=c("hr", "mgs","temp" ), relsaNA=NA)
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
testset[testset$id==unique(testset$id)[animal],]
# show raw data + RELSA
plotset       <- relsa_plot(pre_test, RELSA, levels=levels, animal=animal, plotvar=NULL,
plotRELSA=TRUE, myylim=c(80,120), myYlim=c(0,1.4))
animal       <- 5
RELSA        <- relsa(set=testset, bsl, a=animal, drop=c("bw","score","mgs30","mgs180" ), turnvars=c("hr", "mgs","temp" ), relsaNA=NA)
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
testset[testset$id==unique(testset$id)[animal],]
# show raw data + RELSA
plotset       <- relsa_plot(pre_test, RELSA, levels=levels, animal=animal, plotvar=NULL,
plotRELSA=TRUE, myylim=c(80,120), myYlim=c(0,1.4))
animal       <- 13
RELSA        <- relsa(set=testset, bsl, a=animal, drop=c("bw","score","mgs30","mgs180" ), turnvars=c("hr", "mgs","temp" ), relsaNA=NA)
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
testset[testset$id==unique(testset$id)[animal],]
# show raw data + RELSA
plotset       <- relsa_plot(pre_test, RELSA, levels=levels, animal=animal, plotvar=NULL,
plotRELSA=TRUE, myylim=c(80,120), myYlim=c(0,1.4))
animal       <- 26
RELSA        <- relsa(set=testset, bsl, a=animal, drop=c("bw","score","mgs30","mgs180" ), turnvars=c("hr", "mgs","temp" ), relsaNA=NA)
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
testset[testset$id==unique(testset$id)[animal],]
# show raw data + RELSA
plotset       <- relsa_plot(pre_test, RELSA, levels=levels, animal=animal, plotvar=NULL,
plotRELSA=TRUE, myylim=c(80,120), myYlim=c(0,1.4))
animal       <- 30
RELSA        <- relsa(set=testset, bsl, a=animal, drop=c("bw","score","mgs30","mgs180" ), turnvars=c("hr", "mgs","temp" ), relsaNA=NA)
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
testset[testset$id==unique(testset$id)[animal],]
# show raw data + RELSA
plotset       <- relsa_plot(pre_test, RELSA, levels=levels, animal=animal, plotvar=NULL,
plotRELSA=TRUE, myylim=c(80,120), myYlim=c(0,1.4))
animal       <- 28
RELSA        <- relsa(set=testset, bsl, a=animal, drop=c("bw","score","mgs30","mgs180" ), turnvars=c("hr", "mgs","temp" ), relsaNA=NA)
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
testset[testset$id==unique(testset$id)[animal],]
# show raw data + RELSA
plotset       <- relsa_plot(pre_test, RELSA, levels=levels, animal=animal, plotvar=NULL,
plotRELSA=TRUE, myylim=c(80,120), myYlim=c(0,1.4))
testraw
library(RELSA)
library(usethis)
?usethis
library(pkgbuild)
pkgbuild::build()
has_build_tools()
has_latex()
install.packages("badger")
library(badger)
install.packages("hexSticker")
library(RELSA)
library(RELSA)
git pull origin master
library(RELSA)
library(RELSA)
library(RELSA)
library(pkgbuild)
pkgdown::build_site()
?hexbin
library(hexbin)
?hexbin
?imagemagick
library(hexSticker)
sticker(expression(plot(cars, cex=.5, cex.axis=.5, mgp=c(0,.3,0), xlab="", ylab="")),
package="hexSticker", p_size=8, s_x=1, s_y=.8, s_width=1.2, s_height=1,
filename="inst/figures/baseplot.png")
