lines(border_cir$x, border_cir$y, col="gray20", lwd=2)
# add minor ticks
arrows(x0=tix1_out$x, y0=tix1_out$y, x1=tix1_in$x, y1=tix1_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix2_out$x, y0=tix2_out$y, x1=tix2_in$x, y1=tix2_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix3_out$x, y0=tix3_out$y, x1=tix3_in$x, y1=tix3_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix4_out$x, y0=tix4_out$y, x1=tix4_in$x, y1=tix4_in$y,
length=0, lwd=2.5, col="gray55")
# add major ticks
arrows(x0=major_ticks_out$x, y0=major_ticks_out$y,
x1=major_ticks_in$x, y1=major_ticks_in$y, length=0, lwd=4)
# add value
text(0, -0.65, value, cex=4)
# add label of variable
text(0, 0.43, label, cex=2)
# add needle
arrows(0, 0, val_x, val_y, col="#f38171", lwd=7)
# add central blue point
points(0, 0, col="#2e9ef3", pch=19, cex=5)
# add values 0 and 100
text(z0x, z0y, labels="0", col="gray50")
text(z100x, z100y, labels="100", col="gray50")
fracRELSA$relsa
library(RELSA)
library(magick)
library(purrr)
setwd("C:/MHH Bleich/Papers/PostOPPaper/RELSA filmulation")
raw          <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt", treatment = "Transmitter" )
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
org          <- cbind(raw[,1:4], raw[,vars])
pre          <- relsa_norm(org,   normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Papers/PostOPPaper/Relsa package/paper figures/Clusters/", bsl,
filename="Burrowing levels", drops=c("bw","score"), turns=c("hr","mgs","temp"), relsaNA=NA, k=4,
showScree="no", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
saveTiff="yes")
# Load simulated data -----------------------------------------------------
set          <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/RELSA_simdat.txt" )
RELSA        <- relsa(set=set, bsl, a=1, drop=NULL, turnvars="temp", relsaNA=NA)
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
i=3
fracset   <- set[1:i,]
fracRELSA <- RELSA
fracRELSA$delta <- RELSA$delta[1:i,]
fracRELSA$relsa <- RELSA$relsa[1:i,]
fracRELSA$relsa
RELSA$relsa[i,]
RELSA$relsa[i,"rms"]
as.numeric(RELSA$relsa[i,"rms"])
fracRELSA <- as.numeric(RELSA$relsa[i,"rms"])*100
# indicated value, say 80 (you can choose another number between 0-100)
value = fracRELSA
# angle of needle pointing to the specified value
val = (value/100) * (12/8)
v = -1 * val * pi + 10*pi/8
# x-y coordinates of needle
val_x = 0.7 * cos(v)
val_y = 0.7 * sin(v)
# label to be displayed
label = "RELSA"
# open plot
plot(border_cir$x, border_cir$y, type="n", asp=1, axes=FALSE,
xlim=c(-1.05,1.05), ylim=c(-1.05,1.05),
xlab="", ylab="")
# yellow slice
polygon(c(Syel$x, 0), c(Syel$y, 0),
border = "#FF9900", col = "#FF9900", lty = NULL)
# red slice
polygon(c(Sred$x, 0), c(Sred$y, 0),
border = "#DC3912", col = "#DC3912", lty = NULL)
# white slice
polygon(c(Swhi$x, 0), c(Swhi$y, 0),
border = "white", col = "white", lty = NULL)
# add gray border
lines(external_cir$x, external_cir$y, col="gray85", lwd=20)
# add external border
lines(border_cir$x, border_cir$y, col="gray20", lwd=2)
# add minor ticks
arrows(x0=tix1_out$x, y0=tix1_out$y, x1=tix1_in$x, y1=tix1_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix2_out$x, y0=tix2_out$y, x1=tix2_in$x, y1=tix2_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix3_out$x, y0=tix3_out$y, x1=tix3_in$x, y1=tix3_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix4_out$x, y0=tix4_out$y, x1=tix4_in$x, y1=tix4_in$y,
length=0, lwd=2.5, col="gray55")
# add major ticks
arrows(x0=major_ticks_out$x, y0=major_ticks_out$y,
x1=major_ticks_in$x, y1=major_ticks_in$y, length=0, lwd=4)
# add value
text(0, -0.65, value, cex=4)
# add label of variable
text(0, 0.43, label, cex=2)
# add needle
arrows(0, 0, val_x, val_y, col="#f38171", lwd=7)
# add central blue point
points(0, 0, col="#2e9ef3", pch=19, cex=5)
# add values 0 and 100
text(z0x, z0y, labels="0", col="gray50")
text(z100x, z100y, labels="100", col="gray50")
# Gauge plot --------------------------------------------------------------
frames      <-length(x)
for(i in 1:frames){
name      <- rename(i)
png(name)
fracset   <- set[1:i,]
fracRELSA <- RELSA
fracRELSA <- as.numeric(RELSA$relsa[i,"rms"])*100
# indicated value, say 80 (you can choose another number between 0-100)
value = fracRELSA
# angle of needle pointing to the specified value
val = (value/100) * (12/8)
v = -1 * val * pi + 10*pi/8
# x-y coordinates of needle
val_x = 0.7 * cos(v)
val_y = 0.7 * sin(v)
# label to be displayed
label = "RELSA"
# open plot
plot(border_cir$x, border_cir$y, type="n", asp=1, axes=FALSE,
xlim=c(-1.05,1.05), ylim=c(-1.05,1.05),
xlab="", ylab="")
# yellow slice
polygon(c(Syel$x, 0), c(Syel$y, 0),
border = "#FF9900", col = "#FF9900", lty = NULL)
# red slice
polygon(c(Sred$x, 0), c(Sred$y, 0),
border = "#DC3912", col = "#DC3912", lty = NULL)
# white slice
polygon(c(Swhi$x, 0), c(Swhi$y, 0),
border = "white", col = "white", lty = NULL)
# add gray border
lines(external_cir$x, external_cir$y, col="gray85", lwd=20)
# add external border
lines(border_cir$x, border_cir$y, col="gray20", lwd=2)
# add minor ticks
arrows(x0=tix1_out$x, y0=tix1_out$y, x1=tix1_in$x, y1=tix1_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix2_out$x, y0=tix2_out$y, x1=tix2_in$x, y1=tix2_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix3_out$x, y0=tix3_out$y, x1=tix3_in$x, y1=tix3_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix4_out$x, y0=tix4_out$y, x1=tix4_in$x, y1=tix4_in$y,
length=0, lwd=2.5, col="gray55")
# add major ticks
arrows(x0=major_ticks_out$x, y0=major_ticks_out$y,
x1=major_ticks_in$x, y1=major_ticks_in$y, length=0, lwd=4)
# add value
text(0, -0.65, value, cex=4)
# add label of variable
text(0, 0.43, label, cex=2)
# add needle
arrows(0, 0, val_x, val_y, col="#f38171", lwd=7)
# add central blue point
points(0, 0, col="#2e9ef3", pch=19, cex=5)
# add values 0 and 100
text(z0x, z0y, labels="0", col="gray50")
text(z100x, z100y, labels="100", col="gray50")
dev.off()
}
x            <- 1:40
range        <- x
#number of frames or plots
rename   <- function(x){
if (x < 10) {
return(name <- paste('000',i,'plot.png',sep=''))
}
if (x < 100 && i >= 10) {
return(name <- paste('00',i,'plot.png', sep=''))
}
if (x >= 100) {
return(name <- paste('0', i,'plot.png', sep=''))
}
}
frames      <-length(x)
# Gauge plot --------------------------------------------------------------
frames      <-length(x)
for(i in 1:frames){
name      <- rename(i)
png(name)
fracset   <- set[1:i,]
fracRELSA <- RELSA
fracRELSA <- as.numeric(RELSA$relsa[i,"rms"])*100
# indicated value, say 80 (you can choose another number between 0-100)
value = fracRELSA
# angle of needle pointing to the specified value
val = (value/100) * (12/8)
v = -1 * val * pi + 10*pi/8
# x-y coordinates of needle
val_x = 0.7 * cos(v)
val_y = 0.7 * sin(v)
# label to be displayed
label = "RELSA"
# open plot
plot(border_cir$x, border_cir$y, type="n", asp=1, axes=FALSE,
xlim=c(-1.05,1.05), ylim=c(-1.05,1.05),
xlab="", ylab="")
# yellow slice
polygon(c(Syel$x, 0), c(Syel$y, 0),
border = "#FF9900", col = "#FF9900", lty = NULL)
# red slice
polygon(c(Sred$x, 0), c(Sred$y, 0),
border = "#DC3912", col = "#DC3912", lty = NULL)
# white slice
polygon(c(Swhi$x, 0), c(Swhi$y, 0),
border = "white", col = "white", lty = NULL)
# add gray border
lines(external_cir$x, external_cir$y, col="gray85", lwd=20)
# add external border
lines(border_cir$x, border_cir$y, col="gray20", lwd=2)
# add minor ticks
arrows(x0=tix1_out$x, y0=tix1_out$y, x1=tix1_in$x, y1=tix1_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix2_out$x, y0=tix2_out$y, x1=tix2_in$x, y1=tix2_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix3_out$x, y0=tix3_out$y, x1=tix3_in$x, y1=tix3_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix4_out$x, y0=tix4_out$y, x1=tix4_in$x, y1=tix4_in$y,
length=0, lwd=2.5, col="gray55")
# add major ticks
arrows(x0=major_ticks_out$x, y0=major_ticks_out$y,
x1=major_ticks_in$x, y1=major_ticks_in$y, length=0, lwd=4)
# add value
text(0, -0.65, value, cex=4)
# add label of variable
text(0, 0.43, label, cex=2)
# add needle
arrows(0, 0, val_x, val_y, col="#f38171", lwd=7)
# add central blue point
points(0, 0, col="#2e9ef3", pch=19, cex=5)
# add values 0 and 100
text(z0x, z0y, labels="0", col="gray50")
text(z100x, z100y, labels="100", col="gray50")
dev.off()
}
# Create the animation
list.files(path = "C:/MHH Bleich/Papers/PostOPPaper/RELSA filmulation/", pattern = "*.png", full.names = T) %>%
map(image_read)       %>% # reads each path file
image_join()          %>% # joins image
image_animate(fps=5) %>% # animates, can opt for number of loops
image_write("RELSA_gauge.gif")
frames      <-length(x)
for(i in 1:frames){
name      <- rename(i)
png(name)
fracset   <- set[1:i,]
fracRELSA <- RELSA
fracRELSA <- as.numeric(RELSA$relsa[i,"rms"])*100
# indicated value, say 80 (you can choose another number between 0-100)
value = fracRELSA
# angle of needle pointing to the specified value
val = (value/100) * (12/8)
v = -1 * val * pi + 10*pi/8
# x-y coordinates of needle
val_x = 0.7 * cos(v)
val_y = 0.7 * sin(v)
# label to be displayed
label = "RELSA"
# open plot
plot(border_cir$x, border_cir$y, type="n", asp=1, axes=FALSE,
xlim=c(-1.05,1.05), ylim=c(-1.05,1.05),
xlab="", ylab="")
# yellow slice
polygon(c(Syel$x, 0), c(Syel$y, 0),
border = "#FF9900", col = "#FF9900", lty = NULL)
# red slice
polygon(c(Sred$x, 0), c(Sred$y, 0),
border = "#DC3912", col = "#DC3912", lty = NULL)
# white slice
polygon(c(Swhi$x, 0), c(Swhi$y, 0),
border = "white", col = "white", lty = NULL)
# add gray border
lines(external_cir$x, external_cir$y, col="gray85", lwd=20)
# add external border
lines(border_cir$x, border_cir$y, col="gray20", lwd=2)
# add minor ticks
arrows(x0=tix1_out$x, y0=tix1_out$y, x1=tix1_in$x, y1=tix1_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix2_out$x, y0=tix2_out$y, x1=tix2_in$x, y1=tix2_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix3_out$x, y0=tix3_out$y, x1=tix3_in$x, y1=tix3_in$y,
length=0, lwd=2.5, col="gray55")
arrows(x0=tix4_out$x, y0=tix4_out$y, x1=tix4_in$x, y1=tix4_in$y,
length=0, lwd=2.5, col="gray55")
# add major ticks
arrows(x0=major_ticks_out$x, y0=major_ticks_out$y,
x1=major_ticks_in$x, y1=major_ticks_in$y, length=0, lwd=4)
# add value
text(0, -0.65, value, cex=4)
# add label of variable
text(0, 0.43, label, cex=3)
# add needle
arrows(0, 0, val_x, val_y, col="#f38171", lwd=7)
# add central blue point
points(0, 0, col="#2e9ef3", pch=19, cex=5)
# add values 0 and 100
text(z0x, z0y, labels="0", col="gray50")
text(z100x, z100y, labels="100", col="gray50")
dev.off()
}
# Create the animation
list.files(path = "C:/MHH Bleich/Papers/PostOPPaper/RELSA filmulation/", pattern = "*.png", full.names = T) %>%
map(image_read)       %>% # reads each path file
image_join()          %>% # joins image
image_animate(fps=5) %>% # animates, can opt for number of loops
image_write("RELSA_gauge.gif")
# Load simulated data -----------------------------------------------------
set          <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/RELSA_simdat.txt" )
RELSA        <- relsa(set=set, bsl, a=1, drop=NULL, turnvars="temp", relsaNA=NA)
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
# Set params for filmulation ----------------------------------------------
x            <- 1:40
range        <- x
#number of frames or plots
rename   <- function(x){
if (x < 10) {
return(name <- paste('000',i,'plot.png',sep=''))
}
if (x < 100 && i >= 10) {
return(name <- paste('00',i,'plot.png', sep=''))
}
if (x >= 100) {
return(name <- paste('0', i,'plot.png', sep=''))
}
}
frames      <-length(x)
for(i in 1:frames){
name      <- rename(i)
png(name)
revRange  <- rev(range)
x1        <- set$day[1:i]
y1        <- set$bwc[1:i]
y2        <- set$temp[1:i]
y3        <- set$bur2h[1:i]
op        <- par(mfrow = c(3,1),
oma   = c(5,4,0,0) + 0.1,
mar   = c(0,0,1,1) + 0.1)
plot(x1, y1, type="b", pch=19, xaxt="n",    lwd=2, xlim=c(1,41), ylim=c(80,110), cex.axis=1.5)
abline(v=range[i], col="red", lwd=2)
plot(x1, y2, type="b", pch=19, xaxt="n",    lwd=2, xlim=c(1,41), ylim=c(98,110), cex.axis=1.5)
abline(v=range[i], col="red", lwd=2)
plot(x1, y3, type="b", pch=19, xlab="time", lwd=2, xlim=c(1,41), ylim=c(0,110), cex.axis=1.5)
abline(v=range[i], col="red", lwd=2)
dev.off()
}
frames      <-length(x)
for(i in 1:frames){
name      <- rename(i)
png(name)
revRange  <- rev(range)
x1        <- set$day[1:i]
y1        <- set$bwc[1:i]
y2        <- set$temp[1:i]
y3        <- set$bur2h[1:i]
op        <- par(mfrow = c(3,1),
oma   = c(5,4,0,0) + 0.1,
mar   = c(0,0,1,1) + 0.1)
plot(x1, y1, type="b", pch=19, xaxt="n",    lwd=2, xlim=c(1,41), ylim=c(80,110), cex.axis=2)
abline(v=range[i], col="red", lwd=2)
plot(x1, y2, type="b", pch=19, xaxt="n",    lwd=2, xlim=c(1,41), ylim=c(98,110), cex.axis=2)
abline(v=range[i], col="red", lwd=2)
plot(x1, y3, type="b", pch=19, xlab="time", lwd=2, xlim=c(1,41), ylim=c(0,110), cex.axis=2)
abline(v=range[i], col="red", lwd=2)
dev.off()
}
# Create the animation
list.files(path = "C:/MHH Bleich/Papers/PostOPPaper/RELSA filmulation/", pattern = "*.png", full.names = T) %>%
map(image_read)       %>% # reads each path file
image_join()          %>% # joins image
image_animate(fps=5) %>% # animates, can opt for number of loops
image_write("simuData.gif")
### Training the model ##############
# 1. load package
# 2. load raw data for basic model and parameter estimation (relsa_load)
# 3. define the included variables in the model (vars)
# 4. define the negative variables that are "turned"
# 5. normalize the variables to a range [0;100] (relsa_norm)
# 6. calculate relsa model characteristics (relsa_baseline)
library(RELSA)
library(ROCR)
############ BSL & General ##################
# load some data and subsets
raw          <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt", treatment = "Transmitter" )
### Preprocessing (normalization)
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
org          <- cbind(raw[,1:4], raw[,vars])
pre          <- relsa_norm(org,   normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
### Baseline (unscaled BUT PREPROCESSED data): THE BSL Values are NORMALIZED!
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
bsl
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Papers/PostOPPaper/Relsa package/paper figures/Clusters/", bsl,
filename="Burrowing levels", drops=c("bw","score"), turns=c("hr","mgs","temp"), relsaNA=NA, k=4,
showScree="yes", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
saveTiff="yes")
### Testing the model ###############
# 1. Run the baseline estimation above
# 2. load raw data for basic model and parameter estimation (relsa_load)
# 3. Determine the filtered variables and build a testframe (testset)
# 4. normalize the variables to a range [0;100] (relsa_norm)
# 5. Re-scale "positive" variables (relsa_scaleTurn)
##### Laura Model Single Tests #########################################
testraw      <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt" )
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
animal       <- 1# 22 #13
RELSA        <- relsa(set=testset, bsl, a=animal, drop=c("bw","score","mgs30","mgs180" ), turnvars=c("hr", "mgs","temp" ), relsaNA=NA)
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
testset[testset$id==unique(testset$id)[animal],]
# show raw data + RELSA
plotset       <- relsa_plot(pre_test, RELSA, levels=levels, animal=animal, plotvar=NULL,
plotRELSA=TRUE, myylim=c(80,120), myYlim=c(0,1.4), mypch=19)
RELSA
library(RELSA)
library(ROCR)
############ BSL & General ##################
# load some data and subsets
raw          <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt", treatment = "Transmitter" )
### Preprocessing (normalization)
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
org          <- cbind(raw[,1:4], raw[,vars])
pre          <- relsa_norm(org,   normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
### Baseline (unscaled BUT PREPROCESSED data): THE BSL Values are NORMALIZED!
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
bsl
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Papers/PostOPPaper/Relsa package/paper figures/Clusters/", bsl,
filename="Burrowing levels", drops=c("bw","score"), turns=c("hr","mgs","temp"), relsaNA=NA, k=4,
showScree="yes", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
saveTiff="yes")
### Testing the model ###############
# 1. Run the baseline estimation above
# 2. load raw data for basic model and parameter estimation (relsa_load)
# 3. Determine the filtered variables and build a testframe (testset)
# 4. normalize the variables to a range [0;100] (relsa_norm)
# 5. Re-scale "positive" variables (relsa_scaleTurn)
##### Laura Model Single Tests #########################################
testraw      <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt" )
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
animal       <- 1# 22 #13
RELSA        <- relsa(set=testset, bsl, a=animal, drop=c("bw","score","mgs30","mgs180" ), turnvars=c("hr", "mgs","temp" ), relsaNA=NA)
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
testset[testset$id==unique(testset$id)[animal],]
# show raw data + RELSA
plotset       <- relsa_plot(pre_test, RELSA, levels=levels, animal=animal, plotvar=NULL,
plotRELSA=TRUE, myylim=c(80,120), myYlim=c(0,1.4), mypch=19)
bsl
library(RELSA)
library(ROCR)
############ BSL & General ##################
# load some data and subsets
raw          <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt", treatment = "Transmitter" )
### Preprocessing (normalization)
vars         <- c("bwc", "bur2h","burON","hr","hrv", "temp", "act", "mgs")
turnvars     <- c("hr", "mgs", "temp" )
org          <- cbind(raw[,1:4], raw[,vars])
pre          <- relsa_norm(org,   normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
### Baseline (unscaled BUT PREPROCESSED data): THE BSL Values are NORMALIZED!
bsl          <- relsa_baselines(dataset=pre, bslday=-1, variables=vars, turnvars=turnvars)
bsl
### Determine k clusters and levels for the reference set
levels       <- relsa_levels(pre, mypath="C:/MHH Bleich/Papers/PostOPPaper/Relsa package/paper figures/Clusters/", bsl,
filename="Burrowing levels", drops=c("bw","score"), turns=c("hr","mgs","temp"), relsaNA=NA, k=4,
showScree="yes", customCol= c("red","green","blue","magenta"), seed=123, myYlim=c(0,1.4),
saveTiff="yes")
### Testing the model ###############
# 1. Run the baseline estimation above
# 2. load raw data for basic model and parameter estimation (relsa_load)
# 3. Determine the filtered variables and build a testframe (testset)
# 4. normalize the variables to a range [0;100] (relsa_norm)
# 5. Re-scale "positive" variables (relsa_scaleTurn)
##### Laura Model Single Tests #########################################
testraw      <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt" )
vars         <- names(testraw[,-c(1:4)])
pre_test     <- cbind(testraw[,1:4], testraw[,vars])
testset      <- relsa_norm(pre_test, normthese=c("bur2h","burON","hr","hrv", "temp", "act", "mgs" ), ontime=1)
animal       <- 1# 22 #13
RELSA        <- relsa(set=testset, bsl, a=animal, drop=c("bw","score","mgs30","mgs180" ), turnvars=c("hr", "mgs","temp" ), relsaNA=NA)
relsascore   <- as.numeric(unlist(RELSA$relsa$rms))
testset[testset$id==unique(testset$id)[animal],]
# show raw data + RELSA
plotset       <- relsa_plot(pre_test, RELSA, levels=levels, animal=animal, plotvar=NULL,
plotRELSA=TRUE, myylim=c(80,120), myYlim=c(0,1.4), mypch=19)
pre_test
head(testset)
head(testset[testset$id==unique(testset$id)[animal],])
raw[raw$id==unique(raw$id)[animal],]
head(
raw[raw$id==unique(raw$id)[animal],]
)
head(testset[testset$id==unique(testset$id)[animal],])
raw[raw$day==-1, ]
raw[raw$day==-1, 5:dim(raw)[2]]
apply(raw[raw$day==-1, 5:dim(raw)[2]],2,FUN=mean, na.rm=TRUE)
head(raw[raw$id==unique(raw$id)[animal],])
head(testset[testset$id==unique(testset$id)[animal],])
apply(raw[raw$day==-1, 5:dim(raw)[2]],2,FUN=mean, na.rm=TRUE)
library(RELSA)
library(ROCR)
############ BSL & General ##################
# load some data and subsets
raw          <- relsa_load("C:/MHH Bleich/Papers/PostOPPaper/Data/post-op laura.txt", treatment = "Transmitter" )
raw
raw$bur2h
